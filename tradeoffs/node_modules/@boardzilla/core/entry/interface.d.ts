import type { ElementJSON } from './board/element.js';
import type { PlayerAttributes, Message, SerializedMove } from './game-manager.js';
import type Player from './player/player.js';
import type { FlowBranchJSON } from './flow/flow.js';
import type { SetupFunction } from './game-creator.js';
export type SetupState = {
    players: (PlayerAttributes & Record<string, any>)[];
    settings: Record<string, any>;
    randomSeed: string;
};
export type GameState = {
    players: PlayerAttributes[];
    settings: Record<string, any>;
    position: {
        name?: string;
        args?: Record<string, any>;
        currentPosition: number[];
        stack: FlowBranchJSON[];
    }[];
    board: ElementJSON[];
    sequence: number;
    rseed: string;
    messages: Message[];
    announcements: string[];
};
type GameStartedState = {
    phase: 'started';
    currentPlayers: number[];
    state: GameState;
};
type GameFinishedState = {
    phase: 'finished';
    winners: number[];
    state: GameState;
};
export type PlayerState = {
    position: number;
    state: GameState | GameState[];
    summary?: string;
    score?: number;
};
export type GameUpdate = {
    game: GameStartedState | GameFinishedState;
    players: PlayerState[];
    messages: Message[];
};
type ReprocessHistoryResult = {
    initialState: GameUpdate;
    updates: GameUpdate[];
    error?: string;
};
type SerializedInterfaceMove = {
    position: number;
    data: SerializedMove | SerializedMove[];
};
export type GameInterface = {
    initialState: (state: SetupState) => GameUpdate;
    processMove: (previousState: GameStartedState, move: SerializedInterfaceMove) => GameUpdate;
    seatPlayer(players: Player[], seatCount: number): {
        position: number;
        color: string;
        settings: any;
    } | null;
    reprocessHistory(setup: SetupState, moves: SerializedInterfaceMove[]): ReprocessHistoryResult;
};
export declare const colors: string[];
export declare const createInterface: (setup: SetupFunction) => GameInterface;
export {};
//# sourceMappingURL=interface.d.ts.map