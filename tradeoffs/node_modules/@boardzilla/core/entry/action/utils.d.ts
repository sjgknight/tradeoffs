import type { Argument, SingleArgument } from './action.js';
import type { BaseGame } from '../board/game.js';
export type SerializedSingleArg = string | number | boolean;
export type SerializedArg = SerializedSingleArg | SerializedSingleArg[];
export type Serializable = SingleArgument | null | undefined | Serializable[] | {
    [key: string]: Serializable;
};
export declare const serialize: (arg: Serializable, forPlayer?: boolean, name?: string) => any;
export declare const serializeArg: (arg: Argument, forPlayer?: boolean) => SerializedArg;
export declare const serializeSingleArg: (arg: SingleArgument, forPlayer?: boolean) => SerializedSingleArg;
export declare const serializeObject: (obj: Record<string, any>, forPlayer?: boolean) => {
    [k: string]: any;
};
export declare const escapeArgument: (arg: Argument) => string;
export declare const deserializeArg: (arg: SerializedArg, game: BaseGame) => Argument;
export declare const deserializeSingleArg: (arg: SerializedSingleArg, game: BaseGame) => SingleArgument;
export declare const deserializeObject: (obj: Record<string, any>, game: BaseGame) => {
    [k: string]: Serializable;
};
export declare const deserialize: (arg: any, game: BaseGame) => Serializable;
export declare const combinations: <T>(set: T[], min: number, max: number) => T[][];
//# sourceMappingURL=utils.d.ts.map