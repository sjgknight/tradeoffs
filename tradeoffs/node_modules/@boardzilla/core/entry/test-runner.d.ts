import { createGameStore } from './ui/store.js';
import type { BaseGame } from './board/game.js';
import type { GameInterface, GameUpdate } from './interface.js';
import type { Argument } from './action/action.js';
import type { SetupFunction } from './game-creator.js';
import type { default as GameManager, PlayerAttributes } from './game-manager.js';
declare global {
    interface Window {
        serverGameManager?: GameManager;
    }
}
declare class TestRunnerPlayer<G extends BaseGame> {
    runner: TestRunner<G>;
    store: ReturnType<typeof createGameStore>;
    playerAttrs: PlayerAttributes;
    player: NonNullable<G['player']>;
    game: G;
    position: number;
    constructor(runner: TestRunner<G>, position: number, store: ReturnType<typeof createGameStore>, playerAttrs: PlayerAttributes, game: G);
    move(name: string, args: Record<string, Argument>): void;
    actions(): string[];
}
export declare class TestRunner<G extends BaseGame> {
    private setup;
    server: {
        interface: GameInterface;
        state?: GameUpdate;
        gameManager: GameManager;
        game: G;
    };
    currentPosition: number;
    players: TestRunnerPlayer<G>[];
    constructor(setup: SetupFunction, mocks?: (game: G) => void);
    start({ players, settings }: {
        players: number;
        settings: Record<string, any>;
    }): TestRunnerPlayer<G>[];
    getCurrentGame(): void;
    updatePlayers(): void;
    updatePlayersFromState(): void;
}
export {};
//# sourceMappingURL=test-runner.d.ts.map