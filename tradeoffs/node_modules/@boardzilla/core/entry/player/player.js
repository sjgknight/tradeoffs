import { serializeObject } from '../action/utils.js';
/**
 * Base player class. Each game must declare a single player class that extends
 * this to be used for players joining the game. Additional properties and
 * methods on this class will be available in game, when e.g. a player argument
 * is passed to an action for the player taking that action.
 * @category Core
 */
class Player {
    /**
     * Provide list of attributes that are hidden from other players
     */
    static hide(...attrs) {
        this.hiddenAttributes = attrs;
    }
    isCurrent() {
        return this._players.currentPosition.includes(this.position);
    }
    /**
     * Set this player as the current player
     */
    setCurrent() {
        return this._players.setCurrent(this);
    }
    /**
     * Returns an array of all other players.
     */
    others() {
        return Array.from(this._players).filter(p => p !== this);
    }
    /**
     * Returns the other player. Only allowed in 2 player games
     */
    other() {
        if (this._players.length !== 2)
            throw Error('Can only use `other` for 2 player games');
        return this._players.find(p => p !== this);
    }
    allMy(className, ...finders) {
        return this.game.all(className, { owner: this }, ...finders);
    }
    my(className, ...finders) {
        return this.game.first(className, { owner: this }, ...finders);
    }
    has(className, ...finders) {
        return this.game.has(className, { owner: this }, ...finders);
    }
    toJSON(player) {
        let { _players, game: _b, ...attrs } = this;
        // remove methods
        attrs = serializeObject(Object.fromEntries(Object.entries(attrs).filter(([key, value]) => (typeof value !== 'function' &&
            (player === undefined || player === this || !this.constructor.hiddenAttributes.includes(key))))));
        if (globalThis.window) { // guard-rail in dev
            try {
                structuredClone(attrs);
            }
            catch (e) {
                console.error(`invalid properties on player ${this}:\n${JSON.stringify(attrs, undefined, 2)}`);
                throw (e);
            }
        }
        return attrs;
    }
    toString() {
        return this.name;
    }
}
Player.isPlayer = true;
Player.hiddenAttributes = [];
export default Player;
//# sourceMappingURL=player.js.map