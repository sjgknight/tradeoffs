var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// (disabled):crypto
var require_crypto = __commonJS({
  "(disabled):crypto"() {
  }
});

// node_modules/uuid-random/index.js
var require_uuid_random = __commonJS({
  "node_modules/uuid-random/index.js"(exports, module) {
    "use strict";
    (function() {
      var buf, bufIdx = 0, hexBytes = [], i;
      for (i = 0; i < 256; i++) {
        hexBytes[i] = (i + 256).toString(16).substr(1);
      }
      uuid2.BUFFER_SIZE = 4096;
      uuid2.bin = uuidBin;
      uuid2.clearBuffer = function() {
        buf = null;
        bufIdx = 0;
      };
      uuid2.test = function(uuid3) {
        if (typeof uuid3 === "string") {
          return /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(uuid3);
        }
        return false;
      };
      var crypt0;
      if (typeof crypto !== "undefined") {
        crypt0 = crypto;
      } else if (typeof window !== "undefined" && typeof window.msCrypto !== "undefined") {
        crypt0 = window.msCrypto;
      }
      if (typeof module !== "undefined" && typeof __require === "function") {
        crypt0 = crypt0 || require_crypto();
        module.exports = uuid2;
      } else if (typeof window !== "undefined") {
        window.uuid = uuid2;
      }
      uuid2.randomBytes = function() {
        if (crypt0) {
          if (crypt0.randomBytes) {
            return crypt0.randomBytes;
          }
          if (crypt0.getRandomValues) {
            if (typeof Uint8Array.prototype.slice !== "function") {
              return function(n) {
                var bytes = new Uint8Array(n);
                crypt0.getRandomValues(bytes);
                return Array.from(bytes);
              };
            }
            return function(n) {
              var bytes = new Uint8Array(n);
              crypt0.getRandomValues(bytes);
              return bytes;
            };
          }
        }
        return function(n) {
          var i2, r = [];
          for (i2 = 0; i2 < n; i2++) {
            r.push(Math.floor(Math.random() * 256));
          }
          return r;
        };
      }();
      function randomBytesBuffered(n) {
        if (!buf || bufIdx + n > uuid2.BUFFER_SIZE) {
          bufIdx = 0;
          buf = uuid2.randomBytes(uuid2.BUFFER_SIZE);
        }
        return buf.slice(bufIdx, bufIdx += n);
      }
      function uuidBin() {
        var b = randomBytesBuffered(16);
        b[6] = b[6] & 15 | 64;
        b[8] = b[8] & 63 | 128;
        return b;
      }
      function uuid2() {
        var b = uuidBin();
        return hexBytes[b[0]] + hexBytes[b[1]] + hexBytes[b[2]] + hexBytes[b[3]] + "-" + hexBytes[b[4]] + hexBytes[b[5]] + "-" + hexBytes[b[6]] + hexBytes[b[7]] + "-" + hexBytes[b[8]] + hexBytes[b[9]] + "-" + hexBytes[b[10]] + hexBytes[b[11]] + hexBytes[b[12]] + hexBytes[b[13]] + hexBytes[b[14]] + hexBytes[b[15]];
      }
    })();
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState2(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef2(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect2;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef2;
        exports.useState = useState2;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// src/board/element-collection.ts
var ElementCollection = class _ElementCollection extends Array {
  slice(...a) {
    return super.slice(...a);
  }
  filter(...a) {
    return super.filter(...a);
  }
  all(className, ...finders) {
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, {}, ...finders);
    }
    return this._finder(className, {}, ...finders);
  }
  _finder(className, options, ...finders) {
    const coll = new _ElementCollection();
    if (options.limit !== void 0 && options.limit <= 0)
      return coll;
    const fns = finders.map((finder) => {
      if (typeof finder === "object") {
        const attrs = finder;
        return (el) => Object.entries(attrs).every(([k1, v1]) => (k1 === "empty" ? el.isEmpty() : el[k1]) === v1);
      }
      if (typeof finder === "string") {
        const name = finder;
        return (el) => el.name === name;
      }
      return finder;
    });
    const finderFn = (el, order) => {
      if ((!className || el instanceof className) && fns.every((fn) => fn(el))) {
        if (order === "asc") {
          coll.push(el);
        } else {
          coll.unshift(el);
        }
      }
      if (!options.noRecursive) {
        if (options.limit !== void 0) {
          coll.push(...el._t.children._finder(className, { limit: options.limit - coll.length, order: options.order }, ...finders));
        } else {
          coll.push(...el._t.children._finder(className, {}, ...finders));
        }
      }
    };
    if (options.order === "desc") {
      for (let e = this.length - 1; e >= 0; e--) {
        const el = this[e];
        if (options.limit !== void 0 && coll.length >= options.limit)
          break;
        finderFn(el, "desc");
      }
    } else {
      for (const el of this) {
        if (options.limit !== void 0 && coll.length >= options.limit)
          break;
        finderFn(el, "asc");
      }
    }
    return coll;
  }
  first(className, ...finders) {
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: 1 }, ...finders)[0];
    }
    return this._finder(className, { limit: 1 }, ...finders)[0];
  }
  firstN(n, className, ...finders) {
    if (typeof n !== "number")
      throw Error("first argument must be number of matches");
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: n }, ...finders);
    }
    return this._finder(className, { limit: n }, ...finders);
  }
  last(className, ...finders) {
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: 1, order: "desc" }, ...finders)[0];
    }
    return this._finder(className, { limit: 1, order: "desc" }, ...finders)[0];
  }
  lastN(n, className, ...finders) {
    if (typeof n !== "number")
      throw Error("first argument must be number of matches");
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: n, order: "desc" }, ...finders);
    }
    return this._finder(className, { limit: n, order: "desc" }, ...finders);
  }
  top(className, ...finders) {
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: 1 }, ...finders)[0];
    }
    return this._finder(className, { limit: 1 }, ...finders)[0];
  }
  topN(n, className, ...finders) {
    if (typeof n !== "number")
      throw Error("first argument must be number of matches");
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: n }, ...finders);
    }
    return this._finder(className, { limit: n }, ...finders);
  }
  bottom(className, ...finders) {
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: 1, order: "desc" }, ...finders)[0];
    }
    return this._finder(className, { limit: 1, order: "desc" }, ...finders)[0];
  }
  bottomN(n, className, ...finders) {
    if (typeof n !== "number")
      throw Error("first argument must be number of matches");
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return this._finder(void 0, { limit: n, order: "desc" }, ...finders);
    }
    return this._finder(className, { limit: n, order: "desc" }, ...finders);
  }
  /**
   * Show these elements to all players
   * @category Visibility
   */
  showToAll() {
    for (const el of this) {
      delete el._visible;
    }
  }
  /**
   * Show these elements only to the given player
   * @category Visibility
   */
  showOnlyTo(player) {
    if (typeof player !== "number")
      player = player.position;
    for (const el of this) {
      el._visible = {
        default: false,
        except: [player]
      };
    }
  }
  /**
   * Show these elements to the given players without changing it's visibility to
   * any other players.
   * @category Visibility
   */
  showTo(...player) {
    if (typeof player[0] !== "number")
      player = player.map((p) => p.position);
    for (const el of this) {
      if (el._visible === void 0)
        continue;
      if (el._visible.default) {
        if (!el._visible.except)
          continue;
        el._visible.except = el._visible.except.filter((i) => !player.includes(i));
      } else {
        el._visible.except = Array.from(/* @__PURE__ */ new Set([...el._visible.except instanceof Array ? el._visible.except : [], ...player]));
      }
    }
  }
  /**
   * Hide this element from all players
   * @category Visibility
   */
  hideFromAll() {
    for (const el of this) {
      el._visible = { default: false };
    }
  }
  /**
   * Hide these elements from the given players without changing it's visibility to
   * any other players.
   * @category Visibility
   */
  hideFrom(...player) {
    if (typeof player[0] !== "number")
      player = player.map((p) => p.position);
    for (const el of this) {
      if (el._visible?.default === false && !el._visible.except)
        continue;
      if (el._visible === void 0 || el._visible.default === true) {
        el._visible = {
          default: true,
          except: Array.from(/* @__PURE__ */ new Set([...el._visible?.except instanceof Array ? el._visible.except : [], ...player]))
        };
      } else {
        if (!el._visible.except)
          continue;
        el._visible.except = el._visible.except.filter((i) => !player.includes(i));
      }
    }
  }
  /**
   * Sorts this collection by some {@link Sorter}.
   * @category Structure
   */
  sortBy(key, direction) {
    const rank = (e, k) => typeof k === "function" ? k(e) : e[k];
    const [up, down] = direction === "desc" ? [-1, 1] : [1, -1];
    return this.sort((a, b) => {
      const keys = key instanceof Array ? key : [key];
      for (const k of keys) {
        const r1 = rank(a, k);
        const r2 = rank(b, k);
        if (r1 > r2)
          return up;
        if (r1 < r2)
          return down;
      }
      return 0;
    });
  }
  /**
   * Returns a copy of this collection sorted by some {@link Sorter}.
   * @category Structure
   */
  sortedBy(key, direction = "asc") {
    return this.slice(0, this.length).sortBy(key, direction);
  }
  /**
   * Returns the sum of all elements in this collection measured by a provided key
   * @category Queries
   *
   * @example
   * deck.create(Card, '2', { pips: 2 });
   * deck.create(Card, '3', { pips: 3 });
   * deck.all(Card).sum('pips'); // => 5
   */
  sum(key) {
    return this.reduce((sum, n) => sum + (typeof key === "function" ? key(n) : n[key]), 0);
  }
  /**
   * Returns the element in this collection with the highest value of the
   * provided key(s).
   * @category Queries
   *
   * @param attributes - any number of {@link Sorter | Sorter's} used for
   * comparing. If multiple are provided, subsequent ones are used to break ties
   * on earlier ones.
   *
   * @example
   * army.create(Soldier, 'a', { strength: 2, initiative: 3 });
   * army.create(Soldier, 'b', { strength: 3, initiative: 1 });
   * army.create(Soldier, 'c', { strength: 3, initiative: 2 });
   * army.all(Solider).withHighest('strength', 'initiative'); // => Soldier 'c'
   */
  withHighest(...attributes) {
    return this.sortedBy(attributes, "desc")[0];
  }
  /**
   * Returns the element in this collection with the lowest value of the
   * provided key(s).
   * @category Queries
   *
   * @param attributes - any number of {@link Sorter | Sorter's} used for
   * comparing. If multiple are provided, subsequent ones are used to break ties
   * on earlier ones.
   *
   * @example
   * army.create(Soldier, 'a', { strength: 2, initiative: 3 });
   * army.create(Soldier, 'b', { strength: 3, initiative: 1 });
   * army.create(Soldier, 'c', { strength: 2, initiative: 2 });
   * army.all(Solider).withLowest('strength', 'initiative'); // => Soldier 'c'
   */
  withLowest(...attributes) {
    return this.sortedBy(attributes, "asc")[0];
  }
  /**
   * Returns the highest value of the provided key(s) found on any element in
   * this collection.
   * @category Queries
   *
   * @param key - a {@link Sorter | Sorter's} used for comparing and extracting
   * the max.
   *
   * @example
   * army.create(Soldier, 'a', { strength: 2, initiative: 3 });
   * army.create(Soldier, 'b', { strength: 3, initiative: 1 });
   * army.create(Soldier, 'c', { strength: 2, initiative: 2 });
   * army.all(Solider).max('strength'); // => 3
   */
  max(key) {
    const el = this.sortedBy(key, "desc")[0];
    if (!el)
      return;
    return typeof key === "function" ? key(el) : el[key];
  }
  /**
   * Returns the lowest value of the provided key(s) found on any element in
   * this collection.
   * @category Queries
   *
   * @param key - a {@link Sorter | Sorter's} used for comparing and extracting
   * the minimum.
   *
   * @example
   * army.create(Soldier, 'a', { strength: 2, initiative: 3 });
   * army.create(Soldier, 'b', { strength: 3, initiative: 1 });
   * army.create(Soldier, 'c', { strength: 2, initiative: 2 });
   * army.all(Solider).min('initiative'); // => 1
   */
  min(key) {
    const el = this.sortedBy(key, "asc")[0];
    if (!el)
      return;
    return typeof key === "function" ? key(el) : el[key];
  }
  /**
   * Returns whether all elements in this collection have the same value for key.
   * @category Queries
   */
  areAllEqual(key) {
    if (this.length === 0)
      return true;
    return this.every((el) => el[key] === this[0][key]);
  }
  /**
   * Remove all elements in this collection from the playing area and place them
   * into {@link Game#pile}
   * @category Structure
   */
  remove() {
    for (const el of this) {
      if ("isSpace" in el)
        throw Error("cannot move Space");
      el.remove();
    }
  }
  /**
   * Move all pieces in this collection into another element. See {@link Piece#putInto}.
   * @category Structure
   */
  putInto(to, options) {
    if (this.some((el) => el.hasMoved()) || to.hasMoved())
      to.game.addDelay();
    for (const el of this) {
      if ("isSpace" in el)
        throw Error("cannot move Space");
      el.putInto(to, options);
    }
  }
  // UI
  /**
   * Apply a layout to some of the elements directly contained within the elements
   * in this collection. See {@link GameElement#layout}
   * @category UI
   */
  layout(applyTo, attributes) {
    for (const el of this)
      el.layout(applyTo, attributes);
  }
  /**
   * Configure the layout for all elements contained within this collection. See
   * {@link GameElement#configureLayout}
   * @category UI
   */
  configureLayout(attributes) {
    for (const el of this)
      el.configureLayout(attributes);
  }
  /**
   * Define the appearance of the elements in this collection. Any values
   * provided override previous ones. See {@link GameElement#appearance}.
   * @category UI
   */
  appearance(appearance) {
    for (const el of this)
      el.appearance(appearance);
  }
};

// src/action/utils.ts
var serialize = (arg, forPlayer = true, name) => {
  if (arg === void 0)
    return void 0;
  if (arg === null)
    return null;
  if (arg instanceof Array)
    return arg.map((a) => serialize(a, forPlayer));
  if (typeof arg === "object" && "constructor" in arg && ("isPlayer" in arg.constructor || "isGameElement" in arg.constructor)) {
    return serializeSingleArg(arg, forPlayer);
  }
  if (typeof arg === "object")
    return serializeObject(arg, forPlayer);
  if (typeof arg === "number" || typeof arg === "string" || typeof arg === "boolean")
    return serializeSingleArg(arg, forPlayer);
  throw Error(`Unable to serialize the property ${name ? '"' + name + '": ' : ""} ${arg}. Only primitives, Player's, GameElement's or arrays/objects containing such can be used.`);
};
var serializeSingleArg = (arg, forPlayer = true) => {
  if (typeof arg === "object" && "constructor" in arg) {
    if ("isPlayer" in arg.constructor)
      return `$p[${arg.position}]`;
    if ("isGameElement" in arg.constructor)
      return forPlayer ? `$el[${arg.branch()}]` : `$eid[${arg._t.id}]`;
  }
  return arg;
};
var serializeObject = (obj, forPlayer = true) => {
  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, serialize(v, forPlayer, k)]));
};
var deserializeSingleArg = (arg, game) => {
  if (typeof arg === "number" || typeof arg === "boolean")
    return arg;
  let deser;
  if (arg.slice(0, 3) === "$p[") {
    deser = game.players.atPosition(parseInt(arg.slice(3, -1)));
  } else if (arg.slice(0, 4) === "$el[") {
    deser = game.atBranch(arg.slice(4, -1));
  } else if (arg.slice(0, 5) === "$eid[") {
    deser = game.atID(parseInt(arg.slice(5, -1)));
  } else {
    return arg;
  }
  if (!deser)
    throw Error(`Unable to find arg: ${arg}`);
  return deser;
};
var deserializeObject = (obj, game) => {
  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, deserialize(v, game)]));
};
var deserialize = (arg, game) => {
  if (arg === void 0)
    return void 0;
  if (arg === null)
    return null;
  if (arg instanceof Array)
    return arg.map((a) => deserialize(a, game));
  if (typeof arg === "object")
    return deserializeObject(arg, game);
  if (typeof arg === "number" || typeof arg === "string" || typeof arg === "boolean")
    return deserializeSingleArg(arg, game);
  throw Error(`unable to deserialize ${arg}`);
};

// src/utils.ts
var shuffleArray = (array, random) => {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
};
var times = (n, fn) => Array.from(Array(n)).map((_, i) => fn(i + 1));

// src/board/element.ts
var import_uuid_random = __toESM(require_uuid_random(), 1);
var GameElement = class _GameElement {
  /**
   * Do not use the constructor directly. Instead Call {@link
   * GameElement#create} or {@link GameElement#createMany} on the element in
   * which you want to create a new element.
   * @category Structure
   */
  constructor(ctx) {
    /**
     * tree info
     * @internal
     */
    this._t = {
      children: new ElementCollection(),
      id: 0,
      ref: 0,
      setId: () => {
      }
    };
    /**
     * UI
     * @internal
     */
    this._ui = {
      layouts: [],
      appearance: {},
      getBaseLayout: () => ({
        alignment: "center",
        direction: "square"
      })
    };
    this._ctx = ctx;
    this._ctx.classRegistry ??= [];
    if (!ctx.top) {
      this._ctx.top = this;
      this._ctx.sequence = 0;
    }
    if (!this._ctx.namedSpaces) {
      this._ctx.uniqueNames = {};
      this._ctx.namedSpaces = {};
    }
    this._t = {
      children: new ElementCollection(),
      id: this._ctx.sequence,
      ref: this._ctx.sequence,
      setId: (id) => {
        if (id !== void 0) {
          this._t.id = id;
          if (this._ctx.sequence < id)
            this._ctx.sequence = id;
        }
      }
    };
    this._ctx.sequence += 1;
  }
  static {
    this.isGameElement = true;
  }
  static {
    this.unserializableAttributes = ["_ctx", "_t", "_ui", "game"];
  }
  /**
   * String used for representng this element in game messages when the object
   * is passed directly, e.g. when taking the choice directly from a
   * chooseOnBoard choice.
   * @category Structure
   */
  toString() {
    return this.name || this.constructor.name.replace(/([a-z0-9])([A-Z])/g, "$1 $2");
  }
  isVisibleTo(_player) {
    return true;
  }
  isVisible() {
    return true;
  }
  all(className, ...finders) {
    return this._t.children.all(className, ...finders);
  }
  first(className, ...finders) {
    return this._t.children.first(className, ...finders);
  }
  firstN(n, className, ...finders) {
    return this._t.children.firstN(n, className, ...finders);
  }
  last(className, ...finders) {
    return this._t.children.last(className, ...finders);
  }
  lastN(n, className, ...finders) {
    return this._t.children.lastN(n, className, ...finders);
  }
  top(className, ...finders) {
    return this._t.children.top(className, ...finders);
  }
  topN(n, className, ...finders) {
    return this._t.children.topN(n, className, ...finders);
  }
  bottom(className, ...finders) {
    return this._t.children.bottom(className, ...finders);
  }
  bottomN(n, className, ...finders) {
    return this._t.children.bottomN(n, className, ...finders);
  }
  others(className, ...finders) {
    if (!this._t.parent)
      new ElementCollection();
    return this._t.parent._t.children.all(className, (el) => el !== this, ...finders);
  }
  has(className, ...finders) {
    if (typeof className !== "function" || !("isGameElement" in className)) {
      if (className)
        finders = [className, ...finders];
      return !!this.first(_GameElement, ...finders);
    }
    return !!this.first(className, ...finders);
  }
  /**
   * If this element is adjacent to some other element, using the nearest
   * containing space that has an adjacency map.
   * @category Adjacency
   */
  isAdjacentTo(element) {
    const graph = this.containerWithProperty("isAdjacent");
    if (!graph)
      return false;
    return graph.isAdjacent(this, element);
  }
  /**
   * Finds the shortest distance between two spaces
   * @category Adjacency
   *
   * @param element - {@link element} to measure distance to
   */
  distanceTo(element) {
    const graph = this.containerWithProperty("distanceBetween");
    if (!graph)
      return Infinity;
    return graph.distanceBetween(this, element);
  }
  adjacencies(className, ...finders) {
    const graph = this.containerWithProperty("isAdjacent");
    if (!graph)
      return false;
    return graph.allAdjacentTo(this, className, ...finders);
  }
  withinDistance(distance, className, ...finders) {
    const graph = this.containerWithProperty("allWithinDistanceOf");
    if (!graph)
      return new ElementCollection();
    return graph.allWithinDistanceOf(this, distance, className, ...finders);
  }
  /**
   * Set this class to use a different ordering style.
   * @category Structure
   * @param order - ordering style
   * - "normal": Elements placed into this element are put at the end of the
   *   list (default)
   * - "stacking": Used primarily for stacks of cards. Elements placed into this
   *   element are put at the beginning of the list. E.g. if a stack of cards
   *   has `order` set to `stacking` the {@link first} method will return the
   *   last card placed in the stack, rather than the first one placed in the
   *   stack. Hidden items in the stack are not tracked or animated while
   *   reordered to prevent their identity from being exposed as they move
   */
  setOrder(order) {
    this._t.order = order;
  }
  /**
   * Returns this elements parent.
   * @category Queries
   * @param className - If provided, searches up the parent tree to find the first
   * matching element. E.g. if a Token is placed on a Card in a players
   * Tableau. calling `token.container(Tableau)` can be used to find the
   * grandparent.
   */
  container(className) {
    if (!className)
      return this._t.parent;
    if (this._t.parent)
      return this._t.parent instanceof className ? this._t.parent : this._t.parent.container(className);
  }
  /**
   * Returns this elements containing element that also has a given property.
   * @category Queries
   */
  containerWithProperty(property, value) {
    const parent = this._t.parent;
    if (parent)
      return property in parent && (value === void 0 || parent[property] === value) ? parent : parent.containerWithProperty(property, value);
  }
  /**
   * Returns whether this element has no elements placed within it.
   * @category Structure
   */
  isEmpty() {
    return !this._t.children.length;
  }
  /**
   * Sorts the elements directly contained within this element by some {@link Sorter}.
   * @category Structure
   */
  sortBy(key, direction) {
    return this._t.children.sortBy(key, direction);
  }
  /**
   * re-orders the elements directly contained within this element randomly.
   * @category Structure
   */
  shuffle() {
    const refs = this.childRefsIfObscured();
    shuffleArray(this._t.children, this._ctx.gameManager?.random || Math.random);
    if (refs)
      this.assignChildRefs(refs);
  }
  /**
   * The player that owns this element, or the first element that contains this
   * element searching up through the parent hierarchy. This is related to, but
   * different than {@link player}. E.g. if a standard playing card is in a
   * player's hand, typically the `hand.player` will be assigned to that player
   * but the card itself would not have a `player`. In this case the
   * card.owner() will equal the player in whose hand the card is placed.
   * @category Structure
   */
  get owner() {
    return this.player !== void 0 ? this.player : this._t.parent?.owner;
  }
  /**
   * Whether this element belongs to the player viewing the game. A player is
   * considered to be currently viewing the game if this is called in the
   * context of an action taken by a given player (during an action taken by a
   * player or while the game is viewed by a given player.) It is an error to
   * call this method when not in the context of a player action. When querying
   * for elements using {@link ElementFinder} such as {@link all} and {@link
   * first}, {@link mine} is available as a search key that accepts a value of
   * true/false
   @category Queries
   */
  get mine() {
    if (!this._ctx.player)
      return false;
    return this.owner === this._ctx.player;
  }
  /**
   * Create an element inside this element. This can only be called during the
   * game setup (see {@link createGame}. Any game elements that are required
   * must be created before the game starts. Elements that only appear later in
   * the game can be created inside the {@link Game#pile} or made invisible.
   * @category Structure
   *
   * @param className - Class to create. This class must be included in the `elementClasses` in {@link createGame}.
   * @param name - Sets {@link GameElement#name | name}
   * @param attributes - Sets any attributes of the class that are defined in
   * your own class that extend {@link Space}, {@link Piece}, or {@link
   * Game}. Can also include {@link player}.
   *
   * @example
   * deck.create(Card, 'ace-of-hearts', { suit: 'H', value: '1' });
   */
  create(className, name, attributes) {
    if (this._ctx.gameManager?.phase === "started")
      throw Error("Game elements cannot be created once game has started.");
    const el = this.createElement(className, name, attributes);
    el._t.parent = this;
    const firstPiece = this._t.children.findIndex((c) => !("isSpace" in c));
    if (this._t.order === "stacking" && !("isSpace" in el)) {
      if (firstPiece > 0) {
        this._t.children.splice(firstPiece, 0, el);
      } else {
        this._t.children.unshift(el);
      }
    } else {
      if ("isSpace" in el && firstPiece !== -1) {
        this._t.children.splice(firstPiece, 0, el);
      } else {
        this._t.children.push(el);
      }
    }
    if ("isSpace" in el && name) {
      if (name in this._ctx.uniqueNames) {
        delete this._ctx.namedSpaces[name];
        this._ctx.uniqueNames[name] = false;
      } else {
        this._ctx.namedSpaces[name] = el;
        this._ctx.uniqueNames[name] = true;
      }
    }
    return el;
  }
  /**
   * Create n elements inside this element of the same class. This can only be
   * called during the game setup (see {@link createGame}. Any game elements
   * that are required must be created before the game starts. Elements that
   * only appear later in the game can be created inside the {@link Game#pile}
   * or made invisible.
   * @category Structure
   *
   * @param n - Number to create
   * @param className - Class to create. This class must be included in the `elementClasses` in {@link createGame}.
   * @param name - Sets {@link GameElement#name | name}
   * @param attributes - Sets any attributes of the class that are defined in
   * your own class that extend {@link Space}, {@link Piece}, or {@link
   * Game}. Can also include {@link player}. If a function is supplied here, a
   * single number argument will be passed with the number of the added element,
   * starting with 1.
   */
  createMany(n, className, name, attributes) {
    return new ElementCollection(...times(n, (i) => this.create(className, name, typeof attributes === "function" ? attributes(i) : attributes)));
  }
  /**
   * Base element creation method
   * @internal
   */
  createElement(className, name, attrs) {
    if (!this._ctx.classRegistry.includes(className)) {
      this._ctx.classRegistry.push(className);
    }
    const el = new className(this._ctx);
    el.game = this.game;
    el.name = name;
    Object.assign(el, attrs);
    if ("afterCreation" in el)
      el.afterCreation.bind(el)();
    return el;
  }
  /**
   * Permanently remove an element. This can only be done while defining the
   * game, and is usually only useful when creating groups of elements, such as
   * {@link createMany} or {@link createGrid} where some of the created elements
   * are not needed.
   * @category Structure
   */
  destroy() {
    if (this._ctx.gameManager?.phase === "started")
      throw Error("Game elements cannot be destroy once game has started.");
    const position = this.position();
    this._t.parent?._t.children.splice(position, 1);
  }
  /**
   * Rotation of element if set, normalized to 0-359 degrees
   * @category Structure
   */
  get rotation() {
    if (this._rotation === void 0)
      return 0;
    return (this._rotation % 360 + 360) % 360;
  }
  set rotation(r) {
    this._rotation = r;
  }
  /**
   * Returns the index of this element within its parent, starting at zero
   * @category Structure
   */
  position() {
    return this._t.parent?._t.children.indexOf(this) ?? -1;
  }
  /**
   * Returns a string identifying the tree position of the element suitable for
   * anonymous reference
   * @internal
   */
  branch() {
    const branches = [];
    let node = this;
    while (node._t.parent) {
      const index = node.position();
      if (index === -1)
        throw Error(`Reference to element ${this.constructor.name}${this.name ? ":" + this.name : ""} is no longer current`);
      branches.unshift(index);
      node = node._t.parent;
    }
    branches.unshift(this._ctx.removed === node ? 1 : 0);
    return branches.join("/");
  }
  /**
   * Returns the element at the given position returned by {@link branch}
   * @internal
   */
  atBranch(b) {
    let branch = b.split("/");
    let index = parseInt(branch[0]);
    let node = index === 0 ? this._ctx.top : this._ctx.removed._t.children[index - 1];
    branch.shift();
    while (branch[0] !== void 0) {
      node = node._t.children[parseInt(branch[0])];
      branch.shift();
    }
    return node;
  }
  /**
   * Returns the element for the given id
   * @internal
   */
  atID(id) {
    let el = this._t.children.find((c) => c._t.id === id);
    if (el)
      return el;
    for (const child of this._t.children) {
      el = child.atID(id);
      if (el)
        return el;
    }
  }
  /**
   * Returns the element for the given ref
   * @internal
   */
  atRef(ref) {
    let el = this._t.children.find((c) => c._t.ref === ref);
    if (el)
      return el;
    for (const child of this._t.children) {
      el = child.atRef(ref);
      if (el)
        return el;
    }
  }
  _cellAt(pos) {
    if (!this._size)
      return pos.x === 0 && pos.y === 0 ? "." : void 0;
    if (this.rotation === 0)
      return this._size.shape[pos.y]?.[pos.x];
    if (this.rotation === 90)
      return this._size.shape[this._size.height - 1 - pos.x]?.[pos.y];
    if (this.rotation === 180)
      return this._size.shape[this._size.height - 1 - pos.y]?.[this._size.width - 1 - pos.x];
    if (this.rotation === 270)
      return this._size.shape[pos.x]?.[this._size.width - 1 - pos.y];
  }
  _sizeNeededFor(_element) {
    return { width: 1, height: 1 };
  }
  /**
     * Set an irregular shape for this element. This is only meaningful for the
     * purposes of finding specifically adjacent cells when placed into a
     * PieceGrid. See {@link PieceGrid#adjacenciesByCell}. When rendered in a
     * PieceGrid, the element will have a size large enough to fill the
     * appropriate number of spaces in the grid, but it's appearance is otherwise
     * unaffected and will be based on {@link appearance}. When not rendered in a
     * PieceGrid, the element will take up a single cell but will be scaled
     * relatively to other elements with a shape in the same layout.
     *
     * @param shape - A set of single characters used as labels for each cell. The
     * cell label characters are provided as an array of strings, with each string
     * being one row of cell labels, with spaces used to indicate empty "holes" in
     * the shape. Each row must be the same length. The specific non-space
     * characters used are used for labelling the adjacencies in {@link
     * PieceGrid#adjacenciesByCell} but are otherwise unimportant.
     * @category Adjacency
     *
     * @example
     *
     * domino12.setShape(
     *   '12'
     * );
  
     * tetrisPiece.setShape(
     *   'XX ',
     *   ' XX'
     * );
     */
  setShape(...shape) {
    if (this._ctx.gameManager?.phase === "started")
      throw Error("Cannot change shape once game has started.");
    if (shape.some((s) => s.length !== shape[0].length))
      throw Error("Each row in shape must be same size. Invalid shape:\n" + shape);
    this._size = {
      shape,
      width: shape[0].length,
      height: shape.length
    };
  }
  /**
   * Set the edge labels for this element. These are only meaningful for the
   * purposes of finding specifically adjacent edges when placed into a
   * PieceGrid. See {@link PieceGrid#adjacenciesByEdge}.
   * @category Adjacency
   *
   * @param edges - A set of edge labels for each cell label provided by {@link
   * setShape}. For simple 1-celled shapes, the edges can be provided without
   * cell labels.
   *
   * @example
   *
   * // a bridge tile with a road leading from left to right and a river leading
   * // from top to bottom.
   * simpleTile.setEdge(
   *   up: 'river',
   *   down: 'river',
   *   left: 'road'
   *   right: 'road'
   * });
   *
   * // A tetris-shaped tile with sockets coming out either "end"
   * tetrisPiece.setShape(
   *   'AX ',
   *   ' XB'
   * );
   * tetrisPiece.setEdge({
   *   A: {
   *     left: 'socket'
   *   },
   *   B: {
   *     right: 'socket'
   *   }
   * });
   */
  setEdges(edges) {
    if (this._ctx.gameManager?.phase === "started")
      throw Error("Cannot change shape once game has started.");
    if (Object.keys(edges)[0].length === 1) {
      const missingCell = Object.keys(edges).find((c) => this._size?.shape.every((s) => !s.includes(c)));
      if (missingCell)
        throw Error(`No cell '${missingCell}' defined in shape`);
      this._size.edges = edges;
    } else {
      if (this._size)
        throw Error("setEdges must use the cell characters from setShape as keys");
      this._size = { shape: ["."], width: 1, height: 1, edges: { ".": edges } };
    }
  }
  /**
   * Whether this element has the given element in its parent hierarchy
   * @category Structure
   */
  isDescendantOf(el) {
    return this._t.parent === el || !!this._t.parent?.isDescendantOf(el);
  }
  attributeList() {
    let attrs;
    ({ ...attrs } = this);
    for (const attr of this.constructor.unserializableAttributes)
      delete attrs[attr];
    return Object.fromEntries(Object.entries(attrs).filter(
      ([, value]) => typeof value !== "function"
    ));
  }
  /**
   * JSON representation
   * @param seenBy - optional player position viewing the game
   * @internal
   */
  toJSON(seenBy) {
    let attrs = this.attributeList();
    if (seenBy !== void 0 && !this.isVisibleTo(seenBy)) {
      attrs = Object.fromEntries(Object.entries(attrs).filter(
        ([attr]) => ["_visible", "row", "column", "_rotation", "_size"].includes(attr) || attr !== "name" && this.constructor.visibleAttributes?.includes(attr)
      ));
    }
    const json = Object.assign(serializeObject(attrs, seenBy !== void 0), { className: this.constructor.name });
    if (this._t.order)
      json.order = this._t.order;
    if (seenBy === void 0)
      json._id = this._t.id;
    if (json._id !== this._t.ref)
      json._ref = this._t.ref;
    if (seenBy !== void 0 && this._t.wasRef !== void 0 && this.isVisibleTo(seenBy))
      json._wasRef = this._t.wasRef;
    if (this._t.children.length && (!seenBy || !("_screen" in this) || this._screen === void 0 || this._screen === "all-but-owner" && this.owner?.position === seenBy || this._screen instanceof Array && this._screen.includes(this.owner?.position))) {
      json.children = Array.from(this._t.children.map((c) => c.toJSON(seenBy)));
    }
    if (globalThis.window) {
      try {
        structuredClone(json);
      } catch (e) {
        console.error(`invalid properties on ${this}:
${JSON.stringify(json, void 0, 2)}`);
        throw e;
      }
    }
    return json;
  }
  createChildrenFromJSON(childrenJSON, branch) {
    const childrenRefs = [...this._t.children];
    this._t.children = new ElementCollection();
    for (let i = 0; i !== childrenJSON.length; i++) {
      const json = childrenJSON[i];
      const childBranch = branch + "/" + i;
      let { className, children, _id, _ref, _wasRef, name, order } = json;
      let child = childrenRefs.find((c) => _id !== void 0 ? c._t.id === _id : c._t.ref === (_wasRef ?? _ref));
      if (!child) {
        const elementClass = this._ctx.classRegistry.find((c) => c.name === className);
        if (!elementClass)
          throw Error(`No class found ${className}. Declare any classes in \`game.registerClasses\``);
        child = this.createElement(elementClass, name);
        child._t.setId(_id);
        child._t.parent = this;
        child._t.order = order;
        child._t.ref = _ref ?? _id;
      } else {
        const emptyAttrs = Object.keys(child).filter((k) => !(k in json) && !["_rotation", "column", "row"].includes(k) && !child.constructor.unserializableAttributes.includes(k));
        if (emptyAttrs.length) {
          const blank = Reflect.construct(child.constructor, [{}]);
          for (const attr of emptyAttrs)
            Object.assign(child, { [attr]: blank[attr] });
        }
      }
      if (_id !== void 0)
        child._t.ref = _ref ?? _id;
      if (_wasRef !== void 0 && !this._ctx.trackMovement)
        child._t.wasRef = _wasRef;
      this._t.children.push(child);
      child.createChildrenFromJSON(children || [], childBranch);
    }
  }
  assignAttributesFromJSON(childrenJSON, branch) {
    for (let i = 0; i !== childrenJSON.length; i++) {
      const json = childrenJSON[i];
      let { className: _cn, children, _ref, _wasRef, _id, order: _o, ...rest } = json;
      rest = deserializeObject({ ...rest }, this.game);
      let child = this._t.children[i];
      Object.assign(child, rest);
      child.assignAttributesFromJSON(children || [], branch + "/" + i);
    }
  }
  resetUI() {
    this._ui.layouts = [{
      applyTo: _GameElement,
      attributes: this._ui.getBaseLayout()
    }];
    this._ui.appearance = {};
    for (const child of this._t.children)
      child.resetUI();
  }
  /**
   * Apply a layout to some of the elements directly contained within this
   * element. See also {@link ElementCollection#layout}
   * @category UI
   *
   * @param applyTo - Which elements this layout applies to. Provided value can be:
   * - A specific {@link GameElement}
   * - The name of an element
   * - A specific set of elements ({@link ElementCollection})
   * - A class of elements
   *
   * If multiple layout declarations would apply to the same element, only one
   * will be used. The order of specificity is as above. If a class is used and
   * mutiple apply, the more specific class will be used.
   *
   * @param {Object} attributes - A list of attributes describing the
   * layout. All units of measurement are percentages of this elements width and
   * height from 0-100, unless otherwise noted (See `margin` and `gap`)
   */
  layout(applyTo, attributes) {
    let { slots, area, size, aspectRatio, scaling, gap, margin, offsetColumn, offsetRow } = attributes;
    if (slots && (area || margin || scaling || gap || margin || offsetColumn || offsetRow)) {
      console.warn("Layout has `slots` which overrides supplied grid parameters");
      delete attributes.area;
      delete attributes.margin;
      delete attributes.gap;
      delete attributes.scaling;
      delete attributes.offsetRow;
      delete attributes.offsetColumn;
    }
    if (area && margin) {
      console.warn("Both `area` and `margin` supplied in layout. `margin` is ignored");
      delete attributes.margin;
    }
    if (size && aspectRatio) {
      console.warn("Both `size` and `aspectRatio` supplied in layout. `aspectRatio` is ignored");
      delete attributes.aspectRatio;
    }
    if (size && scaling) {
      console.warn("Both `size` and `scaling` supplied in layout. `scaling` is ignored");
      delete attributes.scaling;
    }
    if (gap && (offsetColumn || offsetRow)) {
      console.warn("Both `gap` and `offset` supplied in layout. `gap` is ignored");
      delete attributes.gap;
    }
    this._ui.layouts.push({ applyTo, attributes: { alignment: "center", direction: "square", ...attributes } });
  }
  /**
   * Creates a collapsible drawer layout for a Space within this Element. This
   * is like {@link GameElement#layout} except for one specific Space, with
   * additional parameters that set the behaviour/appearance of the drawer. A
   * tab will be attached the drawer that will allow it be opened/closed.
   *
   * @param applyTo - The Space for the drawer. Either the Space itself or its
   * name.
   * @param area - The area for the drawer when opened expressed in percentage
   * sizes of this element.
   * @param openDirection - the direction the drawer will open
   * @param tab - JSX for the appearance of the tab
   * @param closedTab - JSX for the appearance of the tab when closed if
   * different
   * @param openIf - A function that will be checked at each game state. If it
   * returns true, the drawer will automatically open.
   * @param closeIf - A function that will be checked at each game state. If it
   * returns true, the drawer will automatically close.
   */
  layoutAsDrawer(applyTo, attributes) {
    const { area, ...container } = attributes;
    this.layout(applyTo, { area, __container__: { type: "drawer", attributes: container } });
  }
  /**
   * Creates a tabbed layout for a set of Space's within this Element. This is
   * like {@link GameElement#layout} except for a set of Spaces, with additional
   * parameters that set the behaviour/appearance of the tabs. Each Space will
   * be laid out into the same area, with a set of tabs attached to allow the
   * Player or the game rules to select which tab is shown.
   *
   * @param applyTo - The Spaces for the drawer as a set of key-value
   * pairs. Each value is a Space or a name of a Space.
   * @param area - The area for the tabs expressed in percentage sizes of this
   * element.
   * @param tabDirection - the side on which the tabs will be placed
   * @param tabs - JSX for the appearance of the tabs as a set of key-value pairs
   * @param setTabTo - A function that will be checked at each game state. If it
   * returns a string, the tab with the matching key will be shown.
   */
  layoutAsTabs(tabs, attributes) {
    const { area, ...container } = attributes;
    const id = (0, import_uuid_random.default)();
    for (const [key, tab] of Object.entries(tabs)) {
      this.layout(tab, { area, __container__: { type: "tabs", id, key, attributes: container } });
    }
  }
  /**
   * Hides a Space within this element and replaces it with popout
   * button. Clicking on the button opens this Space in a full-board modal. This
   * is like {@link GameElement#layout} except for one Space, with additional
   * parameters that set the behaviour/appearance of the popout modal.
   *
   * @param applyTo - The Space for the popout. Either a Space or the name of a
   * Space.
   * @param area - The area for the tabs expressed in percentage sizes of this
   * element.
   * @param button - JSX for the appearance of the popout button
   * @param popoutMargin - Alter the default margin around the opened
   * popout. Takes a percentage or an object with percentages for top, bottom,
   * left and right.
   */
  layoutAsPopout(applyTo, attributes) {
    const { area, ...container } = attributes;
    this.layout(applyTo, { area, __container__: { type: "popout", attributes: container } });
  }
  /**
   * Change the layout attributes for this space's layout.
   * @category UI
   */
  configureLayout(layoutConfiguration) {
    this._ui.layouts[0] = {
      applyTo: _GameElement,
      attributes: {
        ...this._ui.getBaseLayout(),
        ...layoutConfiguration
      }
    };
  }
  /**
   * Define the appearance of this element. Any values provided override
   * previous ones. See also {@link ElementCollection#appearance}
   * @category UI
   *
   * @param appearance - Possible values are:
   * @param appearance.className - A class name to add to the dom element
   *
   * @param appearance.render - A function that takes this element as its only
   * argument and returns JSX for the element. See {@link ../ui/appearance} for
   * more on usage.
   *
   * @param appearance.aspectRatio - The aspect ratio for this element. This
   * value is a ratio of width over height. All layouts defined in {@link
   * layout} will respect this aspect ratio.
   *
   * @param appearance.info - Return JSX for more info on this element. If
   * returning true, an info modal will be available for this element but with
   * only the rendered element and no text
   *
   * @param appearance.connections - If the elements immediately within this
   * element are connected using {@link Space#connectTo}, this makes those
   * connections visible as connecting lines. Providing a `label` will place a
   * label over top of this line by calling the provided function with the
   * distance of the connection specified in {@link Space#connectTo} and using
   * the retured JSX. If `labelScale` is provided, the label is scaled by this
   * amount.
   *
   * @param appearance.effects - Provides a CSS class that will be applied to
   * this element if its attributes change to match the provided ones.
   */
  appearance(appearance) {
    Object.assign(this._ui.appearance, appearance);
  }
  childRefsIfObscured() {
    if (this._t.order !== "stacking")
      return;
    const refs = [];
    for (const child of this._t.children) {
      if (this._ctx.trackMovement)
        child._t.wasRef ??= child._t.ref;
      refs.push(child._t.ref);
    }
    return refs;
  }
  assignChildRefs(refs) {
    for (let i = 0; i != refs.length; i++) {
      this._t.children[i]._t.ref = refs[i];
    }
  }
  hasMoved() {
    return this._t.moved || !!this._t.parent?.hasMoved();
  }
  resetMovementTracking() {
    this._t.moved = false;
    for (const child of this._t.children)
      child.resetMovementTracking();
  }
  resetRefTracking() {
    delete this._t.wasRef;
    for (const child of this._t.children)
      child.resetRefTracking();
  }
};

// src/board/space.ts
var Space = class extends GameElement {
  constructor() {
    super(...arguments);
    this._eventHandlers = { enter: [], exit: [] };
  }
  static {
    this.unserializableAttributes = [...GameElement.unserializableAttributes, "_eventHandlers", "_visOnEnter", "_screen"];
  }
  /**
   * Show pieces to all players when they enter this space
   * @category Visibility
   */
  contentsWillBeShown() {
    this._visOnEnter = { default: true };
  }
  /**
   * Show pieces when they enter this space to its owner
   * @category Visibility
   */
  contentsWillBeShownToOwner() {
    this._visOnEnter = { default: false, except: "owner" };
  }
  /**
   * Show piece to these players when they enter this space
   * @category Visibility
   */
  contentsWillBeShownTo(...players) {
    this._visOnEnter = { default: false, except: players.map((p) => p.position) };
  }
  /**
   * Hide pieces to all players when they enter this space
   * @category Visibility
   */
  contentsWillBeHidden() {
    this._visOnEnter = { default: false };
  }
  /**
   * Hide piece to these players when they enter this space
   * @category Visibility
   */
  contentsWillBeHiddenFrom(...players) {
    this._visOnEnter = { default: true, except: players.map((p) => p.position) };
  }
  /**
   * Call this to screen view completely from players. Blocked spaces completely
   * hide their contents, like a physical screen. No information about the
   * number, type or movement of contents inside this Space will be revealed to
   * the specified players
   *
   * @param players = Players for whom the view is blocked
   * @category Visibility
   */
  blockViewFor(players) {
    this._screen = players === "none" ? void 0 : players instanceof Array ? players.map((p) => p.position) : players;
  }
  isSpace() {
    return true;
  }
  create(className, name, attributes) {
    const el = super.create(className, name, attributes);
    if ("showTo" in el)
      this.triggerEvent("enter", el);
    return el;
  }
  addEventHandler(type, handler) {
    if (this._ctx.gameManager?.phase === "started")
      throw Error("Event handlers cannot be added once game has started.");
    this._eventHandlers[type].push(handler);
  }
  /**
   * Attach a callback to this space for every element that enters or is created
   * within.
   * @category Structure
   *
   * @param type - the class of element that will trigger this callback
   * @param callback - Callback will be called each time an element enters, with
   * the entering element as the only argument.
   *
   * @example
   * deck.onEnter(Card, card => card.hideFromAll()) // card placed in the deck are automatically turned face down
   */
  onEnter(type, callback) {
    this.addEventHandler("enter", { callback, type });
  }
  /**
   * Attach a callback to this space for every element that is moved out of this
   * space.
   * @category Structure
   *
   * @param type - the class of element that will trigger this callback
   * @param callback - Callback will be called each time an element exits, with
   * the exiting element as the only argument.
   *
   * @example
   * deck.onExit(Card, card => card.showToAll()) // cards drawn from the deck are automatically turned face up
   */
  onExit(type, callback) {
    this.addEventHandler("exit", { callback, type });
  }
  triggerEvent(event, element) {
    if (this._visOnEnter) {
      element._visible = {
        default: this._visOnEnter.default,
        except: this._visOnEnter.except === "owner" ? this.owner ? [this.owner.position] : void 0 : this._visOnEnter.except
      };
    }
    for (const handler of this._eventHandlers[event]) {
      if (event === "enter" && !(element instanceof handler.type))
        continue;
      if (event === "exit" && !(element instanceof handler.type))
        continue;
      handler.callback(element);
    }
  }
};

// src/board/piece.ts
var Piece = class _Piece extends GameElement {
  createElement(className, name, attrs) {
    if (className === Space || Object.prototype.isPrototypeOf.call(Space, className)) {
      throw Error(`May not create Space "${name}" in Piece "${this.name}"`);
    }
    return super.createElement(className, name, attrs);
  }
  /**
   * Show this piece to all players
   * @category Visibility
   */
  showToAll() {
    delete this._visible;
  }
  /**
   * Show this piece only to the given player
   * @category Visibility
   */
  showOnlyTo(player) {
    if (typeof player !== "number")
      player = player.position;
    this._visible = {
      default: false,
      except: [player]
    };
  }
  /**
   * Show this piece to the given players without changing it's visibility to
   * any other players.
   * @category Visibility
   */
  showTo(...player) {
    if (typeof player[0] !== "number")
      player = player.map((p) => p.position);
    if (this._visible === void 0)
      return;
    if (this._visible.default) {
      if (!this._visible.except)
        return;
      this._visible.except = this._visible.except.filter((i) => !player.includes(i));
    } else {
      this._visible.except = Array.from(/* @__PURE__ */ new Set([...this._visible.except instanceof Array ? this._visible.except : [], ...player]));
    }
  }
  /**
   * Hide this piece from all players
   * @category Visibility
   */
  hideFromAll() {
    this._visible = { default: false };
  }
  /**
   * Hide this piece from the given players without changing it's visibility to
   * any other players.
   * @category Visibility
   */
  hideFrom(...player) {
    if (typeof player[0] !== "number")
      player = player.map((p) => p.position);
    if (this._visible?.default === false && !this._visible.except)
      return;
    if (this._visible === void 0 || this._visible.default === true) {
      this._visible = {
        default: true,
        except: Array.from(/* @__PURE__ */ new Set([...this._visible?.except instanceof Array ? this._visible.except : [], ...player]))
      };
    } else {
      if (!this._visible.except)
        return;
      this._visible.except = this._visible.except.filter((i) => !player.includes(i));
    }
  }
  /**
   * Returns whether this piece is visible to the given player
   * @category Visibility
   */
  isVisibleTo(player) {
    if (typeof player !== "number")
      player = player.position;
    if (this._visible === void 0)
      return true;
    if (this._visible.default) {
      return !this._visible.except || !this._visible.except.includes(player);
    } else {
      return this._visible.except?.includes(player) || false;
    }
  }
  /**
   * Returns whether this piece is visible to all players, or to the current
   * player if called when in a player context (during an action taken by a
   * player or while the game is viewed by a given player.)
   * @category Visibility
   */
  isVisible() {
    if (this._ctx.player)
      return this.isVisibleTo(this._ctx.player.position);
    return this._visible?.default !== false && (this._visible?.except ?? []).length === 0;
  }
  /**
   * Provide list of attributes that remain visible even when these pieces are
   * not visible to players. E.g. In a game with multiple card decks with
   * different backs, identified by Card#deck, the identity of the card when
   * face-down is hidden, but the deck it belongs to is not, since the card art
   * on the back would identify the deck. In this case calling
   * `Card.revealWhenHidden('deck')` will cause all attributes other than 'deck'
   * to be hidden when the card is face down, while still revealing which deck
   * it is.
   * @category Visibility
   */
  static revealWhenHidden(...attrs) {
    this.visibleAttributes = attrs;
  }
  /**
   * Move this piece into another element. This triggers any {@link
   * Space#onEnter | onEnter} callbacks in the destination.
   * @category Structure
   *
   * @param to - Destination element
   * @param options.position - Place the piece into a specific numbered position
   * relative to the other elements in this space. Positive numbers count from
   * the beginning. Negative numbers count from the end.
   * @param options.fromTop - Place the piece into a specific numbered position counting
   * from the first element
   * @param options.fromBottom - Place the piece into a specific numbered position
   * counting from the last element
   */
  putInto(to, options) {
    if (to.isDescendantOf(this))
      throw Error(`Cannot put ${this} into itself`);
    let pos = to._t.order === "stacking" ? 0 : to._t.children.length;
    if (options?.position !== void 0)
      pos = options.position >= 0 ? options.position : to._t.children.length + options.position + 1;
    if (options?.fromTop !== void 0)
      pos = options.fromTop;
    if (options?.fromBottom !== void 0)
      pos = to._t.children.length - options.fromBottom;
    const previousParent = this._t.parent;
    const position = this.position();
    if (this.hasMoved() || to.hasMoved())
      this.game.addDelay();
    const refs = previousParent === to && options?.row === void 0 && options?.column === void 0 && to.childRefsIfObscured();
    this._t.parent._t.children.splice(position, 1);
    this._t.parent = to;
    to._t.children.splice(pos, 0, this);
    if (refs)
      to.assignChildRefs(refs);
    if (previousParent !== to && previousParent instanceof Space)
      previousParent.triggerEvent("exit", this);
    if (previousParent !== to && this._ctx.trackMovement)
      this._t.moved = true;
    delete this.column;
    delete this.row;
    if (options?.row !== void 0)
      this.row = options.row;
    if (options?.column !== void 0)
      this.column = options.column;
    if (previousParent !== to && to instanceof Space)
      to.triggerEvent("enter", this);
  }
  cloneInto(into) {
    let attrs = this.attributeList();
    delete attrs.column;
    delete attrs.row;
    const clone = into.createElement(this.constructor, this.name, attrs);
    if (into._t.order === "stacking") {
      into._t.children.unshift(clone);
    } else {
      into._t.children.push(clone);
    }
    clone._t.parent = into;
    clone._t.order = this._t.order;
    for (const child of this._t.children)
      if (child instanceof _Piece)
        child.cloneInto(clone);
    return clone;
  }
  /**
   * Remove this piece from the playing area and place it into {@link
   * Game#pile}
   * @category Structure
   */
  remove() {
    return this.putInto(this._ctx.removed);
  }
};

// src/components/d6/d6.ts
var D6 = class extends Piece {
  constructor() {
    super(...arguments);
    this.sides = 6;
    /**
     * Currently shown face
     * @category D6
     */
    this.current = 1;
    this.rollSequence = 0;
  }
  /**
   * Randomly choose a new face, causing the roll animation
   * @category D6
   */
  roll() {
    this.current = Math.ceil((this.game.random || Math.random)() * this.sides);
    this.rollSequence = this._ctx.gameManager.sequence;
  }
};

// src/components/d6/useD6.tsx
var import_react = __toESM(require_react(), 1);
import dice from "./dice.ogg";
var D6Component = ({ die }) => {
  const diceAudio = (0, import_react.useRef)(null);
  const lastRollSequence = (0, import_react.useRef)();
  const [flip, setFlip] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    if (die.rollSequence === Math.ceil(die._ctx.gameManager.sequence - 1) && lastRollSequence.current !== void 0 && lastRollSequence.current !== die.rollSequence) {
      diceAudio.current?.play();
      setFlip(!flip);
    }
    lastRollSequence.current = die.rollSequence;
  }, [die, die.rollSequence, flip, setFlip]);
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("audio", { ref: diceAudio, src: dice, id: "dice" }), /* @__PURE__ */ import_react.default.createElement("ol", { "data-spin": flip ? "up" : "down" }, [1, 2, 3, 4, 5, 6].map((dots) => /* @__PURE__ */ import_react.default.createElement("li", { key: dots, className: "die-face", "data-face": dots }, times(dots, (d) => /* @__PURE__ */ import_react.default.createElement("span", { key: d, className: "dot" }))))));
};
var useD6_default = (game) => {
  game.all(D6).appearance({
    render: (die) => /* @__PURE__ */ import_react.default.createElement(D6Component, { die }),
    aspectRatio: 1
  });
};
export {
  D6,
  useD6_default as useD6
};
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
