import GameElement from '../board/element.js';
import React from 'react';
import type { Game, Box, Vector } from "../board/index.js";
export type UIRender = {
    element: GameElement;
    key?: string;
    mutated?: boolean;
    attributes?: Record<string, any>;
    dataAttributes?: Record<string, any>;
    previousAttributes?: Record<string, any>;
    previousDataAttributes?: Record<string, any>;
    relPos?: Box & {
        rotation?: number;
    };
    pos?: Box & {
        rotation?: number;
    };
    oldPos?: Box & {
        rotation?: number;
    };
    styles?: React.CSSProperties;
    baseStyles?: React.CSSProperties;
    classes?: string;
    effectClasses?: string;
    layouts: {
        area: Box;
        fixed?: Box;
        grid?: {
            anchor: Vector;
            origin: {
                column: number;
                row: number;
            };
            columns: number;
            rows: number;
            offsetColumn: Vector;
            offsetRow: Vector;
        };
        showBoundingBox?: string | boolean;
        children: UIRender[];
        container?: {
            type: 'drawer' | 'popout' | 'tabs';
            attributes: Record<string, any>;
            id?: string;
            key?: string;
        };
    }[];
    parentRef?: number;
    crossParent?: boolean;
    proxy?: number;
};
export type UI = {
    all: Record<string, UIRender>;
    frame: Vector;
    game: UIRender;
    pile: number[];
};
/**
 * recalc all elements UI, base styles, wrapper styles, classes, attrs,
 * data-attrs, assign UUID DOM keys
 * @category UI
 * @internal
 */
export declare function applyLayouts(game: Game, base?: (b: Game) => void): UI;
export declare function applyDOMKeys(render: UIRender, ui: UI, oldUI: UI): void;
export declare function applyDiff(render: UIRender, ui: UI, oldUI: UI): boolean;
/**
 * recalc one elements UI
 * @category UI
 * @internal
 */
export declare function calcLayouts(el: GameElement, ui: UI): UIRender['layouts'];
export declare function translate(original: Box, transform: Box): Box;
export declare function cellBoxRC(column: number, row: number, area: Box, size: {
    width: number;
    height: number;
}, columns: number, rows: number, startingOffset: Vector, cellGap?: Vector, offsetColumn?: Vector, offsetRow?: Vector): Box | undefined;
export declare function cellSizeForArea(rows: number, columns: number, area: {
    width: number;
    height: number;
}, gap?: Vector, offsetColumn?: Vector, offsetRow?: Vector, rhomboid?: boolean): {
    width: number;
    height: number;
};
export declare function getTotalArea(corners: [number, number][], area: Box, size: {
    width: number;
    height: number;
}, columns: number, rows: number, startingOffset: Vector, cellGap?: Vector, offsetColumn?: Vector, offsetRow?: Vector): Box;
//# sourceMappingURL=render.d.ts.map