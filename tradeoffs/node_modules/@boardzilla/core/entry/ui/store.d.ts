import React from 'react';
import GameManager from '../game-manager.js';
import { UIMove } from './lib.js';
import { ActionDebug } from '../game-manager.js';
import type { GameUpdateEvent, GameFinishedEvent, User } from './Main.js';
import type { BaseGame } from '../board/game.js';
import type { GameElement, Piece, PieceGrid } from '../board/index.js';
import type Selection from '../action/selection.js';
import type { Argument } from '../action/action.js';
import type { SetupFunction } from '../game-creator.js';
import type { GameState } from '../interface.js';
import type { ResolvedSelection } from '../action/selection.js';
import type { UI, UIRender } from './render.js';
export type GameStore = {
    host: boolean;
    setHost: (host: boolean) => void;
    userID: string;
    setUserID: (userID: string) => void;
    dev?: boolean;
    setDev: (dev?: boolean) => void;
    setup?: SetupFunction;
    setSetup: (s: SetupFunction) => void;
    gameManager: GameManager;
    isMobile: boolean;
    updateState: (state: (GameUpdateEvent | GameFinishedEvent) & {
        state: GameState;
    }, readOnly?: boolean) => void;
    position?: number;
    move?: UIMove;
    cancellable: boolean;
    selectMove: (move?: UIMove, args?: Record<string, Argument>) => void;
    clearMove: () => void;
    uncommittedArgs: Record<string, Argument>;
    controls?: {
        style: React.CSSProperties;
        name: string;
        moves: UIMove[];
    };
    error?: string;
    setError: (error: string) => void;
    step?: string;
    pendingMoves?: UIMove[];
    prompt?: string;
    boardPrompt?: string;
    actionDescription?: string;
    otherPlayerAction?: string;
    actionDebug?: ActionDebug;
    announcementIndex: number;
    dismissAnnouncement: () => void;
    boardSelections: Record<string, {
        clickMoves: UIMove[];
        dragMoves: {
            move: UIMove;
            drag: Selection | ResolvedSelection;
        }[];
        error?: string;
    }>;
    disambiguateElement?: {
        element: GameElement;
        moves: UIMove[];
    };
    selected?: GameElement[];
    selectElement: (moves: UIMove[], element: GameElement) => void;
    automove?: number;
    rendered?: UI;
    renderedSequence: number;
    setBoardSize: () => void;
    aspectRatio?: number;
    dragElement?: string;
    setDragElement: (el?: string) => void;
    dragOffset: {
        ref?: number;
        x?: number;
        y?: number;
    };
    dropSelections: UIMove[];
    currentDrop?: GameElement;
    setCurrentDrop: (el?: GameElement) => void;
    placement?: {
        selected?: {
            row: number;
            column: number;
        };
        piece: Piece<BaseGame>;
        invalid?: boolean;
        into: PieceGrid<BaseGame>;
        layout: UIRender['layouts'][number];
        rotationChoices?: number[];
    };
    setPlacement: (placement: {
        column: number;
        row: number;
        rotation?: number;
    }) => void;
    selectPlacement: (placement: {
        column: number;
        row: number;
        rotation?: number;
    }) => void;
    infoElement?: {
        info: JSX.Element | boolean;
        element: GameElement;
    };
    setInfoElement: (el?: {
        info: JSX.Element | boolean;
        element: GameElement;
    }) => void;
    userOnline: Map<string, boolean>;
    setUserOnline: (id: string, online: boolean) => void;
};
export declare const createGameStore: () => import("zustand/traditional").UseBoundStoreWithEqualityFn<import("zustand/vanilla").StoreApi<GameStore>>;
export declare const gameStore: import("zustand/traditional").UseBoundStoreWithEqualityFn<import("zustand/vanilla").StoreApi<GameStore>>;
export type SetupComponentProps = {
    name: string;
    settings: Record<string, any>;
    players: User[];
    updateKey: (key: string, value: any) => void;
};
//# sourceMappingURL=store.d.ts.map