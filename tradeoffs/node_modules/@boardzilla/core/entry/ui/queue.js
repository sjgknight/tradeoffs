class Queue {
    constructor(speed = 1) {
        this.speed = speed;
        this.updates = [];
        this.justProcessed = false; // queue was just processed
        this.paused = false;
    }
    schedule(update, waitIfProcessing = false) {
        this.updates.push(update);
        if (this.updates.length === 1 && (!this.justProcessed || !waitIfProcessing)) {
            this.pump();
        }
    }
    pump() {
        if (this.paused)
            return;
        const update = this.updates.shift();
        if (!update) {
            this.justProcessed = false;
            return;
        }
        this.justProcessed = true;
        clearTimeout(this.timeout);
        this.timeout = window.setTimeout(() => this.pump(), this.speed * 1000);
        update();
    }
    pause() {
        this.paused = true;
    }
    resume() {
        if (!this.paused)
            return;
        this.paused = false;
        this.pump();
    }
}
export default Queue;
//# sourceMappingURL=queue.js.map