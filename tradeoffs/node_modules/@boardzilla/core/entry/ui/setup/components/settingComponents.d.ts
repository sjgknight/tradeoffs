import React from 'react';
import type { User } from '../../Main.js';
export type SetupComponentProps = {
    name: string;
    settings: Record<string, any>;
    players: User[];
    updateKey: (key: string, value: any) => void;
};
/**
 * Provide a game setting that can be turned on or off.
 * @param label - Text label to appear next to the toggle
 * @param initial - The default toggle state
 * @category UI
 */
export declare const toggleSetting: (label: string, initial?: boolean) => ({ name, settings, updateKey }: SetupComponentProps) => React.JSX.Element;
/**
 * Provide a game setting that can be selected from a list of options.
 * @param label - Text label to appear next to the option list
 * @param choices - List of choices as key-value pairs, where the value will be
 * the text choice for the host and the key will the result of calling {@link
 * Game#setting}
 * @param initial - The key of preselected choice
 * @category UI
 */
export declare const choiceSetting: (label: string, choices: Record<string, string>, initial?: string) => ({ name, settings, updateKey }: SetupComponentProps) => React.JSX.Element;
/**
 * Provide a game setting that can be entered as text.
 * @param label - Text label to appear next to the text box
 * @param initial - The initial text to appear by default
 * @category UI
 */
export declare const textSetting: (label: string, initial?: string) => ({ name, settings, updateKey }: SetupComponentProps) => React.JSX.Element;
/**
 * Provide a game setting that can be selected as a number.
 * @param label - Text label to appear next to the number select
 * @param min - The minimum number allowed
 * @param max - The maximum number allowed
 * @param initial - The starting value
 * @category UI
 */
export declare const numberSetting: (label: string, min: number, max: number, iniital?: number) => ({ name, settings, updateKey }: SetupComponentProps) => React.JSX.Element;
//# sourceMappingURL=settingComponents.d.ts.map