import React, { useEffect } from 'react';
/**
 * Provide a game setting that can be turned on or off.
 * @param label - Text label to appear next to the toggle
 * @param initial - The default toggle state
 * @category UI
 */
export const toggleSetting = (label, initial = false) => ({ name, settings, updateKey }) => {
    useEffect(() => {
        if (settings[name] === undefined)
            updateKey(name, initial);
    }, [name, settings, updateKey]);
    return (React.createElement("div", null,
        React.createElement("input", { id: name, type: "checkbox", checked: settings?.[name] ?? false, onChange: e => updateKey(name, e.target.checked) }),
        React.createElement("label", { htmlFor: name }, label)));
};
/**
 * Provide a game setting that can be selected from a list of options.
 * @param label - Text label to appear next to the option list
 * @param choices - List of choices as key-value pairs, where the value will be
 * the text choice for the host and the key will the result of calling {@link
 * Game#setting}
 * @param initial - The key of preselected choice
 * @category UI
 */
export const choiceSetting = (label, choices, initial) => ({ name, settings, updateKey }) => {
    useEffect(() => {
        if (settings[name] === undefined)
            updateKey(name, initial ?? Object.keys(choices)[0]);
    }, [name, settings, updateKey]);
    return (React.createElement("div", null,
        React.createElement("label", null,
            label,
            ": "),
        React.createElement("select", { value: settings?.[name], onChange: e => updateKey(name, e.target.value) }, Object.entries(choices).map(([value, name]) => React.createElement("option", { key: value, value: value }, name)))));
};
/**
 * Provide a game setting that can be entered as text.
 * @param label - Text label to appear next to the text box
 * @param initial - The initial text to appear by default
 * @category UI
 */
export const textSetting = (label, initial = "") => ({ name, settings, updateKey }) => {
    useEffect(() => {
        if (settings[name] === undefined)
            updateKey(name, initial);
    }, [name, settings, updateKey]);
    return (React.createElement("div", null,
        React.createElement("label", null,
            label,
            ": "),
        React.createElement("input", { value: settings?.[name] ?? "", onChange: e => updateKey(name, e.target.value) })));
};
/**
 * Provide a game setting that can be selected as a number.
 * @param label - Text label to appear next to the number select
 * @param min - The minimum number allowed
 * @param max - The maximum number allowed
 * @param initial - The starting value
 * @category UI
 */
export const numberSetting = (label, min, max, iniital) => ({ name, settings, updateKey }) => {
    useEffect(() => {
        if (settings[name] === undefined)
            updateKey(name, iniital ?? min);
    }, [name, settings, updateKey]);
    return (React.createElement("div", null,
        React.createElement("label", null,
            label,
            ": "),
        React.createElement("input", { type: "number", min: min, max: max, value: settings?.[name] ?? String(min), onChange: e => updateKey(name, parseInt(e.target.value)) })));
};
//# sourceMappingURL=settingComponents.js.map