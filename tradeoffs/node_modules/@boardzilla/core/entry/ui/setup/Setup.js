import React, { useCallback, useMemo } from 'react';
import Seating from './components/Seating.js';
import { gameStore } from '../store.js';
export default ({ users, players, minPlayers, maxPlayers, setupComponents, settings, seatCount, onUpdatePlayers, onUpdateSettings }) => {
    const [userID, host] = gameStore(s => [s.userID, s.host]);
    const self = useMemo(() => players.find(p => p.id === userID), [players, userID]);
    const updateSettingsKey = useCallback((key, value) => {
        onUpdateSettings({ settings: { ...settings, [key]: value } });
    }, [onUpdateSettings, settings]);
    const settingsComponents = setupComponents ?
        Object.entries(setupComponents).map(([name, component]) => React.createElement(component, {
            name,
            key: name,
            settings: settings || {},
            players,
            updateKey: updateSettingsKey
        })) : [];
    return (React.createElement("div", { id: "setup" },
        React.createElement("div", { id: "background", className: "full-page-cover" }),
        React.createElement("div", { className: host ? '' : 'disabled' },
            React.createElement("div", { className: "heading" },
                React.createElement("h1", null, "Game Setup"),
                host && React.createElement("p", null, "Use the invite link above to get other players to join."),
                players.length < seatCount && React.createElement("p", null,
                    "The game will start once ",
                    React.createElement("b", null, seatCount),
                    " players are seated and ready."),
                players.length === seatCount && players.some(p => !p.playerDetails?.ready) && React.createElement("p", null,
                    "Waiting for ",
                    players.filter(p => !p.playerDetails?.ready).map(p => p === self ? 'you' : p.name).reduce((s, p, i, t) => s + (s ? (i === t.length - 1 ? ' and ' : ', ') : '') + p, ''),
                    " to start.")),
            React.createElement(Seating, { users: users, players: players, minPlayers: minPlayers, maxPlayers: maxPlayers, seatCount: seatCount, onUpdatePlayers: onUpdatePlayers, onUpdateSettings: onUpdateSettings }),
            settingsComponents.length > 0 && (React.createElement("div", { className: "heading" },
                React.createElement("h2", null, "Game Settings"),
                React.createElement("div", { id: "settings" }, settingsComponents))),
            self && (React.createElement("button", { type: "button", className: "ready", onClick: () => onUpdatePlayers([{ type: 'update', userID, ready: !self.playerDetails?.ready }]) }, self.playerDetails?.ready ? "Wait, I'm not ready" : (players.length === seatCount && players.filter(p => !p.playerDetails?.ready).length === 1 ? "Start game" : "I'm ready"))))));
};
//# sourceMappingURL=Setup.js.map