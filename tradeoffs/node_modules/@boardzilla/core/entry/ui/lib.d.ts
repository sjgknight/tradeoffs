/// <reference types="react" />
import { SerializedArg } from '../action/utils.js';
import type { GameStore } from './store.js';
import type { PendingMove } from '../game-manager.js';
import type { UIRender } from './render.js';
import type { Box } from '../board/element.js';
import type { BaseGame } from '../board/game.js';
import type { Game } from '../board/index.js';
export type UIMove = PendingMove & {
    requireExplicitSubmit: boolean;
};
export type MoveMessage = {
    id: string;
    type: 'move';
    data: {
        name: string;
        args: Record<string, SerializedArg>;
    } | {
        name: string;
        args: Record<string, SerializedArg>;
    }[];
};
export declare const ContainerContext: import("react").Context<{
    game?: Game<BaseGame, import("../player/player.js").BasePlayer> | undefined;
    render?: UIRender | undefined;
    layout?: {
        area: Box;
        fixed?: Box | undefined;
        grid?: {
            anchor: import("../board/element.js").Vector;
            origin: {
                column: number;
                row: number;
            };
            columns: number;
            rows: number;
            offsetColumn: import("../board/element.js").Vector;
            offsetRow: import("../board/element.js").Vector;
        } | undefined;
        showBoundingBox?: string | boolean | undefined;
        children: UIRender[];
        container?: {
            type: "drawer" | "popout" | "tabs";
            attributes: Record<string, any>;
            id?: string | undefined;
            key?: string | undefined;
        } | undefined;
    } | undefined;
    absoluteTransform?: Box | undefined;
}>;
export declare function updateSelections(store: GameStore): GameStore;
export declare function updateControls(store: GameStore): Pick<GameStore, "controls">;
export declare function updateBoardSelections(store: GameStore): Pick<GameStore, "boardSelections">;
export declare function updatePrompts(store: GameStore): Partial<GameStore>;
export declare function removePlacementPiece(placement: NonNullable<GameStore['placement']>): void;
export declare function decorateUIMove(move: PendingMove | UIMove): UIMove;
export declare function clearMove(): Partial<GameStore>;
//# sourceMappingURL=lib.d.ts.map