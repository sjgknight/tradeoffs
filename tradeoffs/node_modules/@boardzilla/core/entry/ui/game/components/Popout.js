import React, { useEffect, useMemo, useState } from 'react';
const Popout = ({ layout, children, attributes }) => {
    const [open, setOpen] = useState(false);
    const area = useMemo(() => layout?.area ?? { top: 0, left: 0, width: 100, height: 100 }, [layout]);
    const style = useMemo(() => {
        return {
            top: area.top + '%',
            left: area.left + '%',
            height: area.height + '%',
            width: area.width + '%',
            fontSize: layout.area.height + '%',
        };
    }, [area, layout]);
    const popoutStyle = useMemo(() => {
        return { inset: attributes.popoutMargin === undefined ? '4vmin' : (typeof attributes.popoutMargin === 'number' ? `${attributes.popoutMargin}vmin` : `${attributes.popoutMargin.top}vmin ${attributes.popoutMargin.right}vmin ${attributes.popoutMargin.bottom}vmin ${attributes.popoutMargin.left}vmin`) };
    }, [attributes.popoutMargin]);
    useEffect(() => {
        const keydownHandler = (e) => {
            if (e.repeat)
                return;
            if (e.code === 'Escape')
                setOpen(false);
        };
        window.addEventListener('keydown', keydownHandler);
        return () => window.removeEventListener('keydown', keydownHandler);
    }, [setOpen]);
    return (React.createElement("div", { className: "popout-container", style: style },
        React.createElement("div", { className: "popout-button", onClick: () => open || setOpen(true) }, attributes.button),
        open && (React.createElement("div", { className: "full-page-cover", onClick: () => setOpen(false) },
            React.createElement("div", { className: "popout-modal", onClick: e => e.stopPropagation(), style: popoutStyle },
                children.main,
                React.createElement("svg", { className: "popout-close", onClick: () => setOpen(false), xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24" },
                    React.createElement("circle", { cx: "12", cy: "12", r: "10" }),
                    React.createElement("line", { x1: "15", y1: "9", x2: "9", y2: "15" }),
                    React.createElement("line", { x1: "9", y1: "9", x2: "15", y2: "15" })))))));
};
export default Popout;
//# sourceMappingURL=Popout.js.map