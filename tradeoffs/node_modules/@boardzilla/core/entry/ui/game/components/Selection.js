import React from 'react';
const Selection = ({ selection, value, error, setErrors, onChange }) => (React.createElement("div", { className: `selection ${selection.name}` },
    selection.prompt && selection.type !== 'button' && React.createElement("span", { className: "prompt" }, selection.prompt),
    selection.type === 'choices' && selection.choices?.map(choice => (React.createElement("button", { type: "button", className: (typeof choice === 'object' && 'choice' in choice ? choice.choice : choice) === value ? 'selected' : '', key: String(choice), onClick: () => onChange((typeof choice === 'object' && 'choice' in choice ? choice.choice : choice)) }, String(typeof choice === 'object' && 'label' in choice ? choice.label : choice)))),
    selection.type === 'choices' && selection.invalidOptions?.map(choice => (React.createElement("button", { type: "button", className: 'invalid', key: String(choice.option), onClick: () => setErrors({ [String(selection.name)]: choice.error }) }, String(choice.label ?? choice.option)))),
    selection.type === 'number' && (React.createElement("input", { name: selection.name, type: "number", min: selection.min ?? 1, max: selection.max, onChange: e => onChange(parseInt(e.target.value)), value: String(value), autoComplete: 'off' })),
    selection.type === 'text' && (React.createElement("input", { name: selection.name, onChange: e => onChange(e.target.value), value: String(value), autoComplete: 'off' })),
    selection.type === 'button' &&
        React.createElement("button", { name: selection.name, value: 'confirm', type: "submit" }, selection.prompt ?? String(selection.value)),
    error && React.createElement("div", { className: "error" }, error)));
export default Selection;
//# sourceMappingURL=Selection.js.map