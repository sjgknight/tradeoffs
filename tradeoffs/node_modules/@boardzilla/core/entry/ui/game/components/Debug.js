import React, { useCallback, useEffect, useMemo } from 'react';
import { gameStore } from '../../store.js';
import FlowDebug from './FlowDebug.js';
import Element from './Element.js';
import DebugChoices from './DebugChoices.js';
import DebugArgument from './DebugArgument.js';
const Debug = () => {
    const [position, gameManager, rendered, actionDebug, pendingMoves, infoElement, setInfoElement, selected, disambiguateElement] = gameStore(s => [s.position, s.gameManager, s.rendered, s.actionDebug, s.pendingMoves, s.infoElement, s.setInfoElement, s.selected, s.disambiguateElement]);
    const player = gameManager.players.atPosition(position);
    useEffect(() => setInfoElement(), [setInfoElement]);
    const getAction = useCallback((name) => pendingMoves?.find(m => m.name === name), [pendingMoves]);
    const getSelection = useCallback((name, selection) => getAction(name)?.selections.find(s => s.name === selection), [getAction]);
    let elementStyle = useMemo(() => {
        if (!infoElement?.element)
            return {};
        const scale = rendered.all[String(infoElement.element._t.ref)].pos;
        let fontSize = 24 * 0.04;
        const aspectRatio = scale.width / scale.height;
        if (aspectRatio > 1) {
            scale.width = 100;
            fontSize /= aspectRatio;
        }
        else {
            scale.width *= 100 / scale.height;
        }
        return {
            width: scale.width + '%',
            aspectRatio,
            fontSize: fontSize + 'rem',
        };
    }, [infoElement?.element, rendered]);
    if (!gameManager || !actionDebug)
        return null;
    return (React.createElement("div", { id: "debug-overlay", className: "full-page-cover", onClick: () => setInfoElement() },
        React.createElement("div", { id: "flow-debug" }, Object.entries(gameManager.flows).map(([name, flow]) => (React.createElement(React.Fragment, { key: name },
            name !== '__main__' && React.createElement("div", { className: "subflow" },
                "subflow \"",
                name.replace(/__/g, ''),
                "\""),
            React.createElement(FlowDebug, { flow: flow.visualize(flow), nest: 0, current: true }))))),
        React.createElement("div", { id: "action-debug" },
            React.createElement("div", { id: "action-breakdown" },
                React.createElement("b", null,
                    "Available Actions for ",
                    player.name),
                React.createElement("ul", null, Object.entries(actionDebug).map(([action, { impossible, args }]) => (React.createElement("li", { className: `action-block ${impossible || Object.values(args).some(a => a === 'imp') ? 'impossible' : ''}`, key: action },
                    React.createElement("div", null,
                        React.createElement("span", { className: "name" }, action === '__pass__' ? 'Implied pass' : action),
                        impossible && React.createElement("span", null,
                            " (Impossible by ",
                            React.createElement("code", null, "action.condition"),
                            ")")),
                    action !== '__pass__' && !impossible && (React.createElement("ul", null, gameManager.getAction(action, player).selections.map(s => [s.name, s.type, getSelection(action, s.name)]).map(([name, type, sel]) => (React.createElement("li", { key: name, className: `selection-type-${args[name] ?? 'future'}` },
                        React.createElement("div", { className: "function" },
                            React.createElement("code", null, { number: 'chooseNumber', board: 'chooseOnBoard', 'choices': 'chooseFrom', text: 'enterText', button: 'confirm', place: 'placePiece' }[type]),
                            "\u00A0",
                            React.createElement("span", { className: "name" },
                                "\"",
                                name,
                                "\"")),
                        ['ask', 'imp', 'tree'].includes(args[name]) && (React.createElement("div", null,
                            React.createElement("ul", null,
                                React.createElement(DebugChoices, { choices: sel?.boardChoices || sel?.choices, heading: "Choices" }),
                                React.createElement(DebugChoices, { choices: sel?.invalidOptions, heading: "Invalid" }),
                                (sel?.min !== undefined || sel?.max !== undefined) && React.createElement(React.Fragment, null,
                                    React.createElement("li", null,
                                        "min: ",
                                        sel.min ?? 1),
                                    React.createElement("li", null,
                                        "max: ",
                                        sel.max ?? 'âˆž'))))),
                        args[name] === 'imp' && ' (no valid choices)',
                        args[name] === 'tree' && ' (no valid continuation)',
                        ['sel', 'skip', 'only-one', 'forced', 'always'].includes(args[name]) && (React.createElement("span", null,
                            React.createElement("span", { className: "argument" },
                                React.createElement(DebugArgument, { argument: getAction(action)?.args[name] })),
                            args[name] === 'sel' && ' (player-selected)',
                            args[name] === 'skip' && React.createElement("span", null,
                                " (skipped by ",
                                React.createElement("code", null, "skipIf"),
                                " function)"),
                            args[name] === 'only-one' && React.createElement("span", null,
                                " (skipped by ",
                                React.createElement("code", null, "\"only-one\""),
                                ")"),
                            args[name] === 'forced' && React.createElement("span", null,
                                " (will skip by ",
                                React.createElement("code", null, "\"only-one\""),
                                ")")))))))))))),
                selected?.length && (React.createElement("div", { style: { marginBottom: '1em' } },
                    React.createElement("hr", null),
                    React.createElement(DebugChoices, { choices: selected, heading: "selected" }),
                    disambiguateElement && React.createElement("span", null,
                        "(ambiguous: valid moves are: \"",
                        disambiguateElement.moves.map(m => m.name).join('", "'),
                        "\")")))),
            infoElement?.element && (React.createElement("div", { className: "element-zoom" },
                React.createElement("div", { style: elementStyle },
                    React.createElement(Element, { render: rendered.all[infoElement.element._t.ref], mode: 'zoom', onSelectElement: () => { } })))))));
};
export default Debug;
//# sourceMappingURL=Debug.js.map