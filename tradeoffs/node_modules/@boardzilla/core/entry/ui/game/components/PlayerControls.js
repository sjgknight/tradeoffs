import React from 'react';
import { gameStore } from '../../store.js';
import ActionForm from './ActionForm.js';
const PlayerControls = ({ onSubmit }) => {
    const [position, controls, boardPrompt, error, disambiguateElement, cancellable] = gameStore(s => [s.position, s.controls, s.boardPrompt, s.error, s.disambiguateElement, s.cancellable]);
    if (!position || !controls)
        return null;
    if (!boardPrompt && controls.moves.length === 0)
        return null;
    let visibleAction = !!boardPrompt && !disambiguateElement;
    return (React.createElement("div", { key: controls.name, className: `player-controls ${controls.name.replace(":", "-")}`, style: controls.style },
        boardPrompt && React.createElement("div", { className: "prompt" }, boardPrompt === '__missing__' ? 'Your move' : boardPrompt),
        controls.moves.map((pendingMove, i) => {
            let actionDivider = false;
            if (pendingMove.prompt || disambiguateElement || !pendingMove.selections[0]?.isBoardChoice()) {
                actionDivider = visibleAction;
                visibleAction = true;
            }
            return (React.createElement(React.Fragment, { key: i },
                actionDivider && React.createElement("div", { className: "action-divider" }, "or"),
                React.createElement(ActionForm, { move: pendingMove, stepName: controls.name, onSubmit: onSubmit })));
        }),
        error && React.createElement("div", { className: "error" }, error),
        (cancellable || disambiguateElement) && (React.createElement(React.Fragment, null,
            visibleAction && React.createElement("div", { className: "action-divider" }, "or"),
            React.createElement("button", { className: "cancel", onClick: () => onSubmit() }, "Cancel")))));
};
export default PlayerControls;
//# sourceMappingURL=PlayerControls.js.map