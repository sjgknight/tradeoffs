import React, { useMemo, useState, useEffect, useCallback } from 'react';
import { gameStore } from '../../store.js';
import Element from './Element.js';
const InfoOverlay = ({ setMode }) => {
    const [collapsed, setCollapsed] = useState(false);
    const [infoModal, setInfoModal] = useState(undefined);
    const [gameManager, rendered, infoElement, setInfoElement, actionDescription] = gameStore(s => [s.gameManager, s.rendered, s.infoElement, s.setInfoElement, s.actionDescription]);
    useEffect(() => setInfoElement(), [setInfoElement]);
    let elementStyle = useMemo(() => {
        if (!infoElement?.element)
            return {};
        const scale = rendered.all[String(infoElement.element._t.ref)].pos;
        let fontSize = 32 * 0.04;
        const aspectRatio = scale.width / scale.height;
        if (aspectRatio > 1) {
            scale.width = 100;
            fontSize /= aspectRatio;
        }
        else {
            scale.width *= 100 / scale.height;
        }
        return {
            width: scale.width + '%',
            aspectRatio,
            fontSize: fontSize + 'rem',
        };
    }, [rendered, infoElement?.element]);
    const close = useCallback(() => {
        if (infoElement || infoModal !== undefined) {
            setInfoElement();
            setInfoModal(undefined);
        }
        else {
            setMode('game');
        }
    }, [infoElement, infoModal, setInfoElement, setInfoModal, setMode]);
    useEffect(() => {
        const keydownHandler = (e) => {
            if (e.repeat)
                return;
            if (e.code === 'Escape')
                close();
        };
        window.addEventListener('keydown', keydownHandler);
        return () => window.removeEventListener('keydown', keydownHandler);
    }, [close]);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { id: "info-overlay", className: "full-page-cover", onClick: close }),
        React.createElement("div", { id: "info-container", className: "full-page-cover" },
            React.createElement("div", { id: "info-drawer", className: collapsed ? 'collapsed' : '' },
                React.createElement("div", { className: "header" },
                    React.createElement("div", { className: "title" },
                        React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", onClick: () => { setMode('game'); setInfoElement(); setInfoModal(undefined); } },
                            React.createElement("path", { fill: "black", d: "M50.433,0.892c-27.119,0-49.102,21.983-49.102,49.102s21.983,49.103,49.102,49.103s49.101-21.984,49.101-49.103S77.552,0.892,50.433,0.892z M59,79.031C59,83.433,55.194,87,50.5,87S42,83.433,42,79.031V42.469c0-4.401,3.806-7.969,8.5-7.969s8.5,3.568,8.5,7.969V79.031z M50.433,31.214c-5.048,0-9.141-4.092-9.141-9.142c0-5.049,4.092-9.141,9.141-9.141c5.05,0,9.142,4.092,9.142,9.141C59.574,27.122,55.482,31.214,50.433,31.214z" }))),
                    React.createElement("div", { className: "controls" },
                        React.createElement("svg", { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", onClick: () => setCollapsed(!collapsed) },
                            React.createElement("g", { "data-name": "Layer 2" },
                                React.createElement("g", { "data-name": "collapse" },
                                    React.createElement("path", { fill: "black", d: "M19 9h-2.58l3.29-3.29a1 1 0 1 0-1.42-1.42L15 7.57V5a1 1 0 0 0-1-1 1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 0-2z" }),
                                    React.createElement("path", { fill: "black", d: "M10 13H5a1 1 0 0 0 0 2h2.57l-3.28 3.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L9 16.42V19a1 1 0 0 0 1 1 1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1z" })))))),
                !collapsed && (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "contents" },
                        React.createElement("h1", null, "Currently"),
                        React.createElement("ul", null,
                            gameManager.messages.map((m, i) => {
                                const player = m.body.match(/\[\[\$p\[(\d+)/);
                                let color = undefined;
                                if (player) {
                                    color = gameManager.players.atPosition(parseInt(player[1]))?.color;
                                }
                                return (React.createElement("li", { style: { color }, key: i },
                                    React.createElement("span", { dangerouslySetInnerHTML: { __html: m.body.replace(/\[\[[^|]*\|(.*?)\]\]/g, '$1') } })));
                            }),
                            actionDescription && (React.createElement("li", { style: { color: gameManager.players.allCurrent()[0]?.color } },
                                React.createElement("span", null, actionDescription))))),
                    React.createElement("div", { className: "contents" },
                        React.createElement("h1", null, "More game info"),
                        gameManager.game._ui.infoModals?.
                            filter(({ condition }) => !condition || condition(gameManager.game)).
                            map(({ title }, key) => (React.createElement("button", { key: key, className: "info-modal-title", onClick: () => { setInfoElement(); setInfoModal(key); } }, title))),
                        React.createElement("div", { className: "more-info" }, "See more detail by clicking on highlighted items."))))),
            (!!infoElement || infoModal !== undefined) && (React.createElement("div", { id: "info-modal", className: `modal-popup ${infoElement ? 'info-element' : ''}` },
                infoElement && (React.createElement(React.Fragment, null,
                    infoElement.element && (React.createElement("div", { className: "element-zoom" },
                        React.createElement("div", { style: elementStyle },
                            React.createElement(Element, { render: rendered.all[infoElement.element._t.ref], mode: 'zoom', onSelectElement: () => { } })))),
                    React.createElement("span", { className: "info-text" },
                        infoElement.element && React.createElement("h1", null, `${infoElement.element}`),
                        typeof infoElement.info !== 'boolean' && infoElement.info))),
                !infoElement && (gameManager.game._ui.infoModals[infoModal].modal(gameManager.game)))))));
};
export default InfoOverlay;
//# sourceMappingURL=InfoOverlay.js.map