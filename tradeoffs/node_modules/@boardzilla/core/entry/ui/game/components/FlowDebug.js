import React from 'react';
const colors = ['#900', '#060', '#009', '#606'];
const FlowDebug = ({ flow, nest, current }) => (React.createElement(React.Fragment, null,
    React.createElement("div", { className: `flow-debug-block ${current && !flow.current.block ? 'current' : ''}`, style: { ['--color']: colors[nest % 4], color: colors[nest % 4] } },
        React.createElement("div", { className: "header" },
            React.createElement("span", { className: "type" }, flow.type),
            (flow.name || flow.current.position !== undefined) && (React.createElement("span", { className: "name" },
                flow.name,
                flow.name && flow.current.position !== undefined && ' = ',
                flow.current.position !== undefined && String(flow.current.position)))),
        Object.entries(flow.blocks).map(([name, block]) => (React.createElement("div", { key: name, className: "do-block" },
            React.createElement("div", { className: "name" }, name),
            block?.map((step, seq) => {
                const nextCurrent = current && name === flow.current.block && seq === (flow.current.sequence ?? 0);
                return typeof step === 'string' ?
                    React.createElement("div", { key: seq, className: `function ${nextCurrent ? 'current' : ''}`, title: step }, step.trim().slice(0, 200)) :
                    React.createElement(FlowDebug, { key: seq, flow: step, nest: nest + 1, current: nextCurrent });
            })))))));
export default FlowDebug;
//# sourceMappingURL=FlowDebug.js.map