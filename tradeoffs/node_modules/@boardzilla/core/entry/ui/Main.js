import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { gameStore } from './store.js';
import Game from './game/Game.js';
import Setup from './setup/Setup.js';
import Queue from './queue.js';
export default ({ minPlayers, maxPlayers, defaultPlayers, setupComponents }) => {
    const [gameManager, updateState, setUserOnline, announcementIndex] = gameStore(s => [s.gameManager, s.updateState, s.setUserOnline, s.announcementIndex]);
    const [settings, setSettings] = useState();
    const [seatCount, setSeatCount] = useState(defaultPlayers);
    const [users, setUsers] = useState([]);
    const [readySent, setReadySent] = useState(false);
    const players = useMemo(() => users.filter(u => !!u.playerDetails), [users]);
    const moveCallbacks = useMemo(() => [], []);
    const catchError = useCallback((error) => {
        if (!error)
            return;
        console.error(error);
    }, []);
    const queue = useMemo(() => new Queue(1) /* speed */, []);
    useEffect(() => {
        if (gameManager.announcements[announcementIndex]) {
            queue.pause();
        }
        else if (queue.paused) {
            setTimeout(() => queue.resume(), 500);
        }
    }, [queue, gameManager, announcementIndex]);
    const listener = useCallback((event) => {
        const data = event.data;
        switch (data.type) {
            case 'settingsUpdate':
                setSettings(data.settings);
                setSeatCount(data.seatCount);
                break;
            case 'users':
                setUsers(data.users);
                break;
            case 'userOnline':
                setUserOnline(data.id, data.online);
                break;
            case 'gameUpdate':
            case 'gameFinished':
                {
                    if (data.state instanceof Array) {
                        const states = data.state;
                        let delay = data.state[0].sequence === gameManager.sequence + 1;
                        for (let i = 0; i !== states.length; i++) {
                            const state = states[i];
                            queue.schedule(() => updateState({ ...data, state }, i !== states.length - 1), delay);
                            delay = true;
                        }
                    }
                    else {
                        let delay = data.state.sequence === gameManager.sequence + 1;
                        queue.schedule(() => updateState(data), delay); // TS needs help here...
                    }
                }
                break;
            case 'messageProcessed':
                if (data.error) {
                    catchError(data.error);
                    const move = moveCallbacks[parseInt(data.id)];
                    if (move)
                        move(data.error);
                }
                delete moveCallbacks[parseInt(data.id)];
                break;
        }
    }, [setUserOnline, moveCallbacks, gameManager, queue, updateState, catchError]);
    useEffect(() => {
        window.addEventListener('message', listener, false);
        const message = { type: "ready" };
        if (!readySent) {
            window.top.postMessage(message, "*");
            setReadySent(true);
        }
        return () => window.removeEventListener('message', listener);
    }, [readySent, listener]);
    const updateSettings = useCallback((update) => {
        if (update.settings)
            setSettings(update.settings);
        if (update.seatCount)
            setSeatCount(update.seatCount);
        const message = {
            type: "updateSettings",
            id: 'settings',
            settings: update.settings ?? settings ?? {},
            seatCount: update.seatCount ?? seatCount
        };
        window.top.postMessage(message, "*");
    }, [seatCount, settings]);
    const updatePlayers = useCallback((operations) => {
        const message = {
            type: 'updatePlayers',
            id: 'updatePlayers',
            operations
        };
        window.top.postMessage(message, "*");
    }, []);
    return (React.createElement(React.Fragment, null,
        gameManager.phase === 'new' && settings &&
            React.createElement(Setup, { users: users, minPlayers: minPlayers, maxPlayers: maxPlayers, setupComponents: setupComponents, players: players, settings: settings, seatCount: seatCount, onUpdatePlayers: updatePlayers, onUpdateSettings: updateSettings }),
        (gameManager.phase === 'started' || gameManager.phase === 'finished') && React.createElement(Game, null)));
};
//# sourceMappingURL=Main.js.map