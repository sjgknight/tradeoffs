import ForLoop from './for-loop.js';
import type { FlowArguments, FlowDefinition, FlowBranchNode } from './flow.js';
import type { ForLoopPosition } from './for-loop.js';
import type { Serializable } from '../action/utils.js';
import type Flow from './flow.js';
export type ForEachPosition<T> = ForLoopPosition<T> & {
    collection: T[];
};
export default class ForEach<T extends Serializable> extends ForLoop<T> {
    collection: ((a: FlowArguments) => T[]) | T[];
    position: ForEachPosition<T>;
    whileCondition: (position: ForEachPosition<T>) => boolean;
    type: FlowBranchNode['type'];
    constructor({ name, collection, do: block }: {
        name: string;
        collection: ((a: FlowArguments) => T[]) | T[];
        do: FlowDefinition;
    });
    reset(): void;
    toJSON(forPlayer?: boolean): {
        index: number;
        value: any;
        collection: any;
    };
    fromJSON(position: any): {
        index: any;
        value: Serializable;
        collection: Serializable;
    };
    toString(): string;
    visualize(top: Flow): import("./flow.js").FlowVisualization;
}
//# sourceMappingURL=for-each.d.ts.map