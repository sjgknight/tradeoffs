import ForLoop from './for-loop.js';
import { Player } from '../player/index.js';
import type { FlowArguments, FlowDefinition } from './flow.js';
import type Flow from './flow.js';
export default class EachPlayer<P extends Player> extends ForLoop<P> {
    continueUntil?: (p: P) => boolean;
    turns?: number;
    constructor({ name, startingPlayer, nextPlayer, turns, continueUntil, do: block }: {
        name: string;
        startingPlayer?: ((a: FlowArguments) => P) | P;
        nextPlayer?: (p: P) => P;
        turns?: number;
        continueUntil?: (p: P) => boolean;
        do: FlowDefinition;
    });
    setPosition(position: typeof this.position, sequence?: number, reset?: boolean): void;
    toJSON(): {
        index: number;
        value: import("../action/utils.js").SerializedSingleArg | undefined;
    };
    fromJSON(position: any): {
        index: any;
        value: P | undefined;
    };
    allSteps(): FlowDefinition;
    toString(): string;
    visualize(top: Flow): import("./flow.js").FlowVisualization;
}
//# sourceMappingURL=each-player.d.ts.map