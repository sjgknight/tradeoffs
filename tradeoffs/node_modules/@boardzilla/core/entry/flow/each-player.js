import ForLoop from './for-loop.js';
import { serializeSingleArg, deserializeSingleArg } from '../action/utils.js';
export default class EachPlayer extends ForLoop {
    constructor({ name, startingPlayer, nextPlayer, turns, continueUntil, do: block }) {
        let initial;
        if (startingPlayer) {
            initial = () => startingPlayer instanceof Function ? startingPlayer(this.flowStepArgs()) : startingPlayer;
        }
        else {
            initial = () => this.gameManager.players[0];
        }
        let next = (player) => (nextPlayer ? nextPlayer(player) : this.gameManager.players.after(player));
        super({
            name,
            initial,
            next,
            while: () => true,
            do: block
        });
        this.whileCondition = position => continueUntil !== undefined ? !continueUntil(position.value) : position.index < this.gameManager.players.length * (this.turns || 1);
        this.turns = turns;
    }
    setPosition(position, sequence, reset = true) {
        if (position.value && position.value.position !== this.position?.value.position) {
            this.gameManager.players.setCurrent(position.value);
        }
        super.setPosition(position, sequence, reset);
    }
    toJSON() {
        return {
            index: this.position.index,
            value: this.position.value ? serializeSingleArg(this.position.value) : undefined
        };
    }
    fromJSON(position) {
        return {
            index: position.index,
            value: position.value ? deserializeSingleArg(position.value, this.gameManager.game) : undefined
        };
    }
    allSteps() {
        return this.block;
    }
    toString() {
        return `each-player${this.name ? ":" + this.name : ""} (player #${this.position?.value?.position}${this.block instanceof Array ? ', item #' + this.sequence : ''})`;
    }
    visualize(top) {
        return this.visualizeBlocks({
            type: 'eachPlayer',
            top,
            blocks: {
                do: this.block instanceof Array ? this.block : [this.block]
            },
            block: 'do',
            position: this.position?.value,
        });
    }
}
//# sourceMappingURL=each-player.js.map