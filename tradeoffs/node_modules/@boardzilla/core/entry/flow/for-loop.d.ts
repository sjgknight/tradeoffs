import type { Serializable } from '../action/utils.js';
import type { FlowArguments, FlowDefinition, FlowBranchNode } from './flow.js';
import WhileLoop from './while-loop.js';
import type Flow from './flow.js';
export type ForLoopPosition<T> = {
    index: number;
    value: T;
};
export default class ForLoop<T = Serializable> extends WhileLoop {
    block: FlowDefinition;
    position: ForLoopPosition<T>;
    initial: ((a: FlowArguments) => T) | T;
    whileCondition: (position: ForLoopPosition<T>) => boolean;
    next: (a: T) => T;
    type: FlowBranchNode['type'];
    constructor({ name, initial, next, do: block, while: whileCondition }: {
        name: string;
        initial: ((a: FlowArguments) => T) | T;
        next: (a: T) => T;
        while: (a: T) => boolean;
        do: FlowDefinition;
    });
    currentBlock(): FlowDefinition | undefined;
    toString(): string;
    visualize(top: Flow): import("./flow.js").FlowVisualization;
}
//# sourceMappingURL=for-loop.d.ts.map