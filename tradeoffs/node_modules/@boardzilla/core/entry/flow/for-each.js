import ForLoop from './for-loop.js';
import { serialize, deserialize } from '../action/utils.js';
export default class ForEach extends ForLoop {
    constructor({ name, collection, do: block }) {
        super({
            name,
            initial: () => ((typeof collection === 'function') ? collection(this.flowStepArgs()) : collection)[0],
            next: () => this.position.collection[this.position.index + 1],
            while: () => true,
            do: block
        });
        this.type = 'foreach';
        this.collection = collection;
        this.whileCondition = position => position.index >= 0 && position.index < position.collection.length;
    }
    reset() {
        const collection = (typeof this.collection === 'function') ? this.collection(this.flowStepArgs()) : this.collection;
        this.setPosition({ index: collection.length ? 0 : -1, value: collection[0], collection });
    }
    toJSON(forPlayer = true) {
        return {
            index: this.position.index,
            value: serialize(this.position.value, forPlayer),
            collection: serialize(this.position.collection, forPlayer)
        };
    }
    fromJSON(position) {
        return {
            index: position.index,
            value: deserialize(position.value, this.gameManager.game),
            collection: deserialize(position.collection, this.gameManager.game)
        };
    }
    toString() {
        return `foreach${this.name ? ":" + this.name : ""} (index: ${this.position.index}, value: ${this.position.value}${this.block instanceof Array ? ', item #' + this.sequence : ''})`;
    }
    visualize(top) {
        return this.visualizeBlocks({
            type: 'forEach',
            top,
            blocks: {
                do: this.block instanceof Array ? this.block : [this.block]
            },
            block: 'do',
            position: this.position?.value,
        });
    }
}
//# sourceMappingURL=for-each.js.map