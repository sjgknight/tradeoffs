import Flow from './flow.js';
import { FlowControl } from './enums.js';
import { InterruptControl } from './enums.js';
import type { FlowArguments, FlowDefinition, FlowBranchNode } from './flow.js';
export type WhileLoopPosition = {
    index: number;
    value?: any;
};
export default class WhileLoop extends Flow {
    block: FlowDefinition;
    position: WhileLoopPosition;
    whileCondition: (position: WhileLoopPosition) => boolean;
    type: FlowBranchNode['type'];
    next?: (...a: any) => void;
    initial?: any;
    constructor({ do: block, while: whileCondition }: {
        while: (a: FlowArguments) => boolean;
        do: FlowDefinition;
    });
    reset(): void;
    currentBlock(): FlowDefinition | undefined;
    advance(): FlowControl;
    repeat(): FlowControl;
    exit(): FlowControl.complete;
    interrupt(signal: InterruptControl): FlowControl | undefined;
    allSteps(): FlowDefinition;
    toString(): string;
    visualize(top: Flow): import("./flow.js").FlowVisualization;
}
//# sourceMappingURL=while-loop.d.ts.map