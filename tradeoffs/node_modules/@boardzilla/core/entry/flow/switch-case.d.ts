import Flow from './flow.js';
import type { FlowArguments, FlowDefinition, FlowBranchNode } from './flow.js';
import type { Serializable } from '../action/utils.js';
export type SwitchCasePostion<T> = {
    index?: number;
    value?: T;
    default?: boolean;
};
export type SwitchCaseCases<T> = ({
    eq: T;
    do: FlowDefinition;
} | {
    test: (a: T) => boolean;
    do: FlowDefinition;
})[];
export default class SwitchCase<T extends Serializable> extends Flow {
    position: SwitchCasePostion<T>;
    switch: ((a: FlowArguments) => T) | T;
    cases: SwitchCaseCases<T>;
    default?: FlowDefinition;
    type: FlowBranchNode['type'];
    constructor({ name, switch: switchExpr, cases, default: def }: {
        name?: string;
        switch: ((a: FlowArguments) => T) | T;
        cases: SwitchCaseCases<T>;
        default?: FlowDefinition;
    });
    reset(): void;
    currentBlock(): FlowDefinition | undefined;
    toJSON(forPlayer?: boolean): {
        index: number | undefined;
        value: any;
        default: boolean;
    };
    fromJSON(position: any): {
        index: any;
        value: Serializable;
        default: any;
    };
    allSteps(): FlowDefinition;
    toString(): string;
    visualize(top: Flow): import("./flow.js").FlowVisualization;
}
//# sourceMappingURL=switch-case.d.ts.map