import Flow from './flow.js';
import { FlowControl } from './enums.js';
import { InterruptControl } from './enums.js';
export default class WhileLoop extends Flow {
    constructor({ do: block, while: whileCondition }) {
        super({ do: block });
        this.type = 'loop';
        this.whileCondition = () => whileCondition(this.flowStepArgs());
    }
    reset() {
        const position = { index: 0 };
        if (this.initial !== undefined)
            position.value = this.initial instanceof Function ? this.initial(this.flowStepArgs()) : this.initial;
        if (!this.whileCondition(position)) {
            this.setPosition({ ...position, index: -1 });
        }
        else {
            this.setPosition(position);
        }
    }
    currentBlock() {
        if (this.position.index !== -1)
            return this.block;
    }
    advance() {
        if (this.position.index > 10000)
            throw Error(`Endless loop detected: ${this.name}`);
        if (this.position.index === -1) {
            return this.exit();
        }
        const position = { ...this.position, index: this.position.index + 1 };
        if (this.next && this.position.value !== undefined)
            position.value = this.next(this.position.value);
        if (!this.whileCondition(position))
            return this.exit();
        this.setPosition(position);
        return FlowControl.ok;
    }
    repeat() {
        if (!this.whileCondition(this.position))
            return this.exit();
        this.setPosition(this.position);
        return FlowControl.ok;
    }
    exit() {
        this.setPosition({ ...this.position, index: -1 });
        return FlowControl.complete;
    }
    interrupt(signal) {
        if (signal === InterruptControl.continue)
            return this.advance();
        if (signal === InterruptControl.repeat)
            return this.repeat();
        if (signal === InterruptControl.break)
            return this.exit();
    }
    allSteps() {
        return this.block;
    }
    toString() {
        return `loop${this.name ? ":" + this.name : ""} (loop ${this.position.index === -1 ? 'complete' : '#' + this.position.index}${this.block instanceof Array ? ', item #' + this.sequence : ''})`;
    }
    visualize(top) {
        const isLoop = this.whileCondition.toString() === '() => true';
        return this.visualizeBlocks({
            type: isLoop ? 'loop' : 'whileLoop',
            top,
            blocks: {
                do: this.block instanceof Array ? this.block : [this.block]
            },
            block: 'do',
            position: this.position ? this.position.index + 1 : undefined,
        });
    }
}
//# sourceMappingURL=while-loop.js.map